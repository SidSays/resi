//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class WaveDashboards {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Datasets {
		public String id {get;set;} 
		public String label {get;set;} 
		public String name {get;set;} 
		public String url {get;set;} 

		public Datasets(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'label') {
							label = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Datasets consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CreatedBy {
		public String id {get;set;} 
		public String name {get;set;} 
		public String profilePhotoUrl {get;set;} 

		public CreatedBy(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'profilePhotoUrl') {
							profilePhotoUrl = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CreatedBy consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Dashboards> dashboards {get;set;} 
	public Object nextPageUrl {get;set;} 
	public Integer totalSize {get;set;} 
	public String url {get;set;} 

	public WaveDashboards(JSONParser parser) {
		while (parser.nextToken() != JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != JSONToken.VALUE_NULL) {
					if (text == 'dashboards') {
						dashboards = new List<Dashboards>();
						while (parser.nextToken() != JSONToken.END_ARRAY) {
							dashboards.add(new Dashboards(parser));
						}
					} else if (text == 'nextPageUrl') {
						nextPageUrl = parser.getText();
					} else if (text == 'totalSize') {
						totalSize = parser.getIntegerValue();
					} else if (text == 'url') {
						url = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Permissions {
		public Boolean manage {get;set;} 
		public Boolean modify {get;set;} 
		public Boolean view {get;set;} 

		public Permissions(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'manage') {
							manage = parser.getBooleanValue();
						} else if (text == 'modify') {
							modify = parser.getBooleanValue();
						} else if (text == 'view') {
							view = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Permissions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Dashboards {
		public Boolean allowPreview {get;set;} 
		public String assetSharingUrl {get;set;} 
		public CreatedBy createdBy {get;set;} 
		public String createdDate {get;set;} 
		public List<Datasets> datasets {get;set;} 
		public List<Files> files {get;set;} 
		public Datasets folder {get;set;} 
		public String id {get;set;} 
		public String label {get;set;} 
		public String lastAccessedDate {get;set;} 
		public CreatedBy lastModifiedBy {get;set;} 
		public String lastModifiedDate {get;set;} 
		public String name {get;set;} 
		public Permissions permissions {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String url {get;set;} 
		public String description {get;set;} 

		public Dashboards(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'allowPreview') {
							allowPreview = parser.getBooleanValue();
						} else if (text == 'assetSharingUrl') {
							assetSharingUrl = parser.getText();
						} else if (text == 'createdBy') {
							createdBy = new CreatedBy(parser);
						} else if (text == 'createdDate') {
							createdDate = parser.getText();
						} else if (text == 'datasets') {
							datasets = new List<Datasets>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								datasets.add(new Datasets(parser));
							}
						} else if (text == 'files') {
							files = new List<Files>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								files.add(new Files(parser));
							}
						} else if (text == 'folder') {
							folder = new Datasets(parser);
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'label') {
							label = parser.getText();
						} else if (text == 'lastAccessedDate') {
							lastAccessedDate = parser.getText();
						} else if (text == 'lastModifiedBy') {
							lastModifiedBy = new CreatedBy(parser);
						} else if (text == 'lastModifiedDate') {
							lastModifiedDate = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'permissions') {
							permissions = new Permissions(parser);
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Dashboards consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Files {
		public String contentType {get;set;} 
		public Integer fileLength {get;set;} 
		public String fileName {get;set;} 
		public String id {get;set;} 
		public String lastModifiedDate {get;set;} 
		public String url {get;set;} 

		public Files(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'contentType') {
							contentType = parser.getText();
						} else if (text == 'fileLength') {
							fileLength = parser.getIntegerValue();
						} else if (text == 'fileName') {
							fileName = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'lastModifiedDate') {
							lastModifiedDate = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Files consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WaveDashboards parse(String json) {
		return new WaveDashboards(System.JSON.createParser(json));
	}
}
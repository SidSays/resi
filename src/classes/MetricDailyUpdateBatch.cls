/**************************************************************************************************
Name : MetricDailyUpdateBatch
Description : This batch class created to update Goals and Metric value data on daily basis base on Knocks generated by Knock owner
User Story : US491510
Date : 27 July 2015
Author : Ashish Sonawane
Last Modified By : 1) Suchita Sharma(Constructor defined for batch which should take query string as parameter for execution.) 
                   2) Ashish Sonawane(Update code to convert ASM monthly commission cycle to biweekly cycle)
                   3) Ritesh Saxena (Metric calculation changes for 'Start to contact rate', 'On Turf Knocks%' & Dispositions% Between 4-9pm)
***************************************************************************************************/
global class MetricDailyUpdateBatch implements Database.Batchable<sObject>, Database.Stateful{ 

    /*
    * Data Member 
    */      
    private static final String BATCH_COMPLETE_WITH_SUCCESS = 'Completed Without Errors';
    private static final String BATCH_COMPLETE_WITH_FAIL = 'Completed With Errors';
    private static final string BATCH_JOB_NAME = 'MetricDailyUpdateBatch';
    private static final string JOB_STATUS = 'New';
    private static final string NEW_LINE = '\n';
    private static final string SYSTEM_EXCEPTION = 'System Exception - ';    
    private static final string RECORD_TYPE_SEPERATION = ';';
    private static final string JOB_COMMENT = ' ';
    private static final string JOB_NAME_SPACE =  ' - ';
    private Date COMMISION_START_DATE =  null;
    private Date COMMISION_END_DATE =  null;
    private Date BYWEEK_COMMISION_START_DATE =  null;
    private Date BYWEEK_COMMISION_END_DATE =  null;
    
    //Constant use to capture knock between 4pm to 9pm or 3pm to 7pm in winter(hour of knock)
    private Integer KNOCK_START_TIME = 0;
    private Integer KNOCK_END_TIME = 0;
    private Id jobStatusId = null; 
    private Integer XSPSDM_REMAINING_DAYS = 0; 
    private Integer ASM_REMAINING_DAYS = 0;    
    private Map<Id,MetricOldDataWrap> ownerIdMetricOldDataWrapMap = new Map<Id,MetricOldDataWrap>(); 
   
    private static final string PROFILE_ID_SEPERATION = ';';
    private static final string DIRECT_SALES_REPR_PROFILE_ID = System.Label.DirectSaleReprProfId;
    private static final string VIDEO_METRIC = 'Video';
    private static final string HSD_METRIC = 'HSD';
    private static final string VOICE_METRIC = 'Voice';
    private static final string XH_METRIC = 'XH';
    private static final string GOAL_STATUS = System.Label.GoalStatus; 
   
    //Knock Disposition type constants
    private static final string DISPOSITION_START = 'Start';
    private static final string DISPOSITION_CONTACT = 'Contact';
    private static final string DISPOSITION_ENGAGE = 'Engage';
    private static final string DISPOSITION_DISCOVER = 'Discover';
    private static final string DISPOSITION_POSITION = 'Position';
    private static final string DISPOSITION_CLOSE = 'Close';
    //Metric name constants
    private static final string AVG_CLOSE_PER_DAY = 'Average closes per day';
    private static final string AVG_CONTACT_PER_DAY = 'Average contacts per day';
    private static final string AVG_DISCOVER_PER_DAY = 'Average discovers per day';
    private static final string AVG_ENGAGES_PER_DAY = 'Average engages per day';
    private static final string AVG_KNOCKS_PER_DAY = 'Average Knocks per day';
    private static final string AVG_POSITION_PER_DAY = 'Average positions per day';
    private static final string AVG_STARTTOCONTACT_DAY = 'Start to contact rate'; 
    private static final string ONTURF_CONACT_PERC = 'On Turf Contacts%';
    private static final string ONTURF_KNOCKS = 'On Turf Knocks%'; 
    private static final string ONTURF_START_PERC = 'On Turf Start%';
    private static final string AVG_START_PERDAY = 'Average starts per day';
    private static final string DISP_BETWN_4TO9PM = 'Dispositions% Between 4-9pm';
    private static final Set<String> contactStringSet = new Set<String>{'Contact','Contacted','Engage','Discover','Position','Close','Start'};
    
    //Metric Status constants
    private static final string ONTRACK_STATUS = 'OnTrack';
    private static final string BEHIND_STATUS = 'Behind';
    private static final string CRITICAL_STATUS = 'Critical';    
    
    //Select all task with any sold lob 
    private static final string BIWEEKLY_STARTEND_CUST_SET = 'ByWeeklyStartAndEndDate';
    private static final String CUSTOM_SETTING_NAME = 'Default';   
    private static final string GOAL_DIRECTSALES_RECORD_ID = Schema.SObjectType.Goal.getRecordTypeInfosByName().get('Direct Sales').getRecordTypeId();  
    private static final string DSM_PROFILE_ID = System.Label.DSMProfileIdLabel;
    private static final Set<string> profileIdSet  = new Set<string>();
    
    /* Constructor for batch class MetricDailyUpdateBatch with query as argument.
     * Pass the query while executing the batch in the below manner otherwise batch will not execute.
     * Sample queryString :-  'SELECT Timestamp__c, Knocked_Date__c , Id, CreatedDate, Hour_of_Day__c, Off_Turf__c, Disposition__c, HSI_Sold__c, Video_Sold__c, Voice_Sold__c, XH_Sold__c, OwnerId, Owner.ProfileId FROM Task 
                                          WHERE Owner.ProfileId =: DIRECT_SALES_REPR_PROFILE_ID AND RecordTypeId =: knockRecordTypeId 
                                          AND CreatedDate >= :BYWEEK_COMMISION_START_DATE AND CreatedDate < :taskCommsionEndDate'
     */
    public String queryString= '';
    global MetricDailyUpdateBatch(String query)
    {
        this.queryString = query;
    }
    
   /*
    * Query execution to fetch all today's knock
    */
    global Database.QueryLocator start(Database.BatchableContext bContext){                               
        
        //Create Job Status Object
        Job_Status__c jobStatus = new Job_Status__c();
        jobStatus.Name = BATCH_JOB_NAME + JOB_NAME_SPACE  + Datetime.now();
        jobStatus.Status__c = JOB_STATUS;
        jobStatus.Total_Records_Processed__c = 0;
        jobStatus.Total_RGU_Activations_Processed__c = 0;
        jobStatus.Total_RGU_Orders_Processed__c = 0;
        jobStatus.Total_RGU_ORders_Upserted_Today__c = 0;
        jobStatus.Batch_Start_Time__c = Datetime.now();
        jobStatus.Batch_End_Time__c = Datetime.now();
        jobStatus.Comments__c = JOB_COMMENT;
        jobStatus.Number_Of_Fallouts__c = 0;
        Database.insert(jobStatus);  
        jobStatusId = jobStatus.Id;
        Date taskCommsionEndDate = null;
        
        String knockRecordType = System.Label.Knock;        
        String knockRecordTypeId = Schema.SObjectType.Task.getRecordTypeInfosByName().get(knockRecordType.trim()).getRecordTypeId();           
     
        //Get the commission cycle start and end date period from custom settings for Biweekly commission cycle 
        GoalTemplateDates__c byWeeklyStartEndDateDates = GoalTemplateDates__c.getInstance(BIWEEKLY_STARTEND_CUST_SET);
        BYWEEK_COMMISION_START_DATE = byWeeklyStartEndDateDates.Current_Period_Start_Date__c;
        BYWEEK_COMMISION_END_DATE =  byWeeklyStartEndDateDates.Current_Period_Due_Date__c;
        //Add one day in end date so that all time will capture for task for end date
        taskCommsionEndDate =  byWeeklyStartEndDateDates.Current_Period_Due_Date__c.addDays(1);      
        
        //Get knock disposition start and end time in hour to update Activity metric Average Dispositions Between 4-9pm parameter
        MatricDailyUpdateTimeZone__c timeZoneDetails = MatricDailyUpdateTimeZone__c.getInstance('KnockTimeZone');
        KNOCK_START_TIME = (Integer)timeZoneDetails.DispPmStartTime__c;
        KNOCK_END_TIME = (Integer)timeZoneDetails.DispPmEndTime__c;
                                   
        XSPSDM_REMAINING_DAYS = BYWEEK_COMMISION_END_DATE != null?System.today().daysBetween(BYWEEK_COMMISION_END_DATE):0;
              
        return Database.getQueryLocator(queryString);              
    }
    
   /*
    * Execute business logic to update Metrics
    */
    global void execute(Database.BatchableContext bContext, List<Task> taskList){        
        
        List<Job_Status__c> jobStatus = getJobStatus(jobStatusId);  
        try{                    
            Set<Id> startTodayDespTaskSet = new Set<Id>();
                
            //todayOwnerIdMetricWrappListMap use to store knock LOB count by user for today     
            Map<Id,MetricValueWrapper> todayOwnerIdMetricWrappListMap = new Map<Id,MetricValueWrapper>(); 
            //newOwnrIdMetricWrappListMap use to store updated LOB count for users Managers and Managers Manager    
            Map<Id,MetricValueWrapper> newOwnrIdMetricWrappListMap = new Map<Id,MetricValueWrapper>();  
            
            Map<Id,List<Task>> ownrIdTaskListMap = new Map<Id,List<Task>>();  
            Map<Id,ActivtyMetricValWrap> ownrIdActWrappObjMap = new Map<Id,ActivtyMetricValWrap>();  
            Map<Id,Id> userIdManagerIdMap = new Map<Id,Id>();            
            Map<Id,Metric> metricUpdateMap = new Map<Id, Metric>();
            Set<String> ownerIdSet = new Set<String>(); 
            Set<String> dsmUserIdSet = new Set<String>();  
            Set<String> dsrDssUserIdSet = new Set<String>();         
                                                     
            for(Task taskTemp : taskList){                       
                                               
                /* Generate knock Task that to be Update in Activity Goal for DSR User only */              
                String tempId = taskTemp.Owner.ProfileID;
                String ShortId = tempId.substring(0, 15);
                if(DIRECT_SALES_REPR_PROFILE_ID == ShortId){                       
                    List<Task> taskListTemp = new  List<Task>();                                       
                    if(ownrIdTaskListMap.containsKey(taskTemp.OwnerId)){
                        taskListTemp = ownrIdTaskListMap.get(taskTemp.OwnerId);
                    }
                    taskListTemp.add(taskTemp);
                    ownrIdTaskListMap.put(taskTemp.OwnerId, taskListTemp);
                }                                              
            }
           
           /* 
            *  Generate data to update Goal Metric as Activity 
            */      
            for(Id taskOwnerId :  ownrIdTaskListMap.keySet()){
                                
                MetricOldDataWrap metricOldObject = new MetricOldDataWrap();
                if(ownerIdMetricOldDataWrapMap.containsKey(taskOwnerId)){
                    metricOldObject = ownerIdMetricOldDataWrapMap.get(taskOwnerId);                     
                }
                
                /* Increment LOB Count for Deposition as Start For DSR Profile only, as Only DSR knocks */                                
                for(Task taskTemp : ownrIdTaskListMap.get(taskOwnerId)){                   
                    if(taskTemp.Disposition__c == DISPOSITION_START){                                                                   
                        ownerIdSet.add(taskTemp.OwnerId);   
                        MetricValueWrapper wrappObject = new MetricValueWrapper();
                        if(todayOwnerIdMetricWrappListMap.containsKey(taskTemp.OwnerId)){              
                            wrappObject = todayOwnerIdMetricWrappListMap.get(taskTemp.OwnerId);                                                              
                        }                                          
                        wrappObject.userId = taskTemp.OwnerId;                
                        if(taskTemp.Video_Sold__c){                      
                            wrappObject.videoCount += 1;                        
                        }
                        if(taskTemp.HSI_Sold__c){
                            wrappObject.dataCount += 1;
                        }
                        if(taskTemp.Voice_Sold__c){
                            wrappObject.voiceCount += 1;
                        }
                        if(taskTemp.XH_Sold__c){
                            wrappObject.houseCount += 1;
                        }                                            
                        todayOwnerIdMetricWrappListMap.put(taskTemp.OwnerId,wrappObject);  
                   }
                }
                                                                            
                ActivtyMetricValWrap activityMetricObject = new ActivtyMetricValWrap();
                //get day difference between today date and start date of current bi week commission cycle
                Decimal dayDifference = BYWEEK_COMMISION_START_DATE.daysBetween(Date.today());
                if(dayDifference>14){
                    dayDifference=14;
                }
               
                List<Task> taskTempList = ownrIdTaskListMap.get(taskOwnerId);               
                if(!taskTempList.isEmpty()){                   
                    
                    Decimal totalKnockTillDate = taskTempList.size();
                    Decimal noOfOnTurfStartKnock = 0;
                    Decimal noOfOnTurfContactKnock = 0;
                    Decimal noOfOnTurfKnock = 0;
                    Decimal noOfDisposition4To9pm = 0;
                    boolean isAllreadyAddedActivityTemp = metricOldObject.isAllreadyAddedAcivity;
                    
                    for(Task taskTemp : taskTempList){
                        Integer hourValue = 0;
                        String hourOfTheDay = taskTemp.Hour_of_Day__c;                        
                        if(hourOfTheDay != null){                       
                            hourValue = Integer.valueOf(hourOfTheDay.substringBefore('h'));
                        }                       
                        if(DISPOSITION_START.equalsIgnoreCase(taskTemp.Disposition__c)){
                            if(!taskTemp.Off_Turf__c){
                                noOfOnTurfStartKnock += 1;
                            }
                            activityMetricObject.AvgStartPerDay += 1;
                        }else if(DISPOSITION_ENGAGE.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgEngagePerDay += 1;
                        }else if(DISPOSITION_DISCOVER.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgDiscoverPerDay += 1;
                        }else if(DISPOSITION_POSITION.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgPositionPerDay += 1;
                        }else if(DISPOSITION_CLOSE.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgClosesPerDay += 1;
                        }
                        if(!taskTemp.Off_Turf__c){
                            noOfOnTurfKnock += 1;
                        }
                        //base on user time zone we are calculating average disposition for knock
                        if(hourValue >= KNOCK_START_TIME && hourValue <= KNOCK_END_TIME){
                            noOfDisposition4To9pm +=1;
                        }
                        if(contactStringSet.contains(taskTemp.Disposition__c)){
                            // Changed the condition to include {'Contact','Contacted','Engage','Discover','Position','Close','Start'};
                            if(!taskTemp.Off_Turf__c){
                                noOfOnTurfContactKnock += 1;
                            }
                            activityMetricObject.AvgContctsPerDay += 1; 
                        }
                                                                                   
                    }
                    
                    if(activityMetricObject.AvgContctsPerDay > 0){                        
                        if(isAllreadyAddedActivityTemp){
                            activityMetricObject.StartToContact = (metricOldObject.oldAvgStartVal+activityMetricObject.AvgStartPerDay)/(metricOldObject.oldAvgContactVal+activityMetricObject.AvgContctsPerDay);                            
                        }else{                            
                            activityMetricObject.StartToContact = activityMetricObject.AvgStartPerDay/activityMetricObject.AvgContctsPerDay;
                        }                       
                        metricOldObject.oldAvgStartVal += activityMetricObject.AvgStartPerDay;                                               
                        metricOldObject.oldAvgContactVal += activityMetricObject.AvgContctsPerDay;                        
                    }  
                    activityMetricObject.AvgStartPerDay = activityMetricObject.AvgStartPerDay/dayDifference;
                    activityMetricObject.AvgContctsPerDay = activityMetricObject.AvgContctsPerDay/dayDifference;
                    activityMetricObject.AvgEngagePerDay = activityMetricObject.AvgEngagePerDay/dayDifference;
                    activityMetricObject.AvgDiscoverPerDay = activityMetricObject.AvgDiscoverPerDay/dayDifference;
                    activityMetricObject.AvgPositionPerDay = activityMetricObject.AvgPositionPerDay/dayDifference;
                    activityMetricObject.AvgClosesPerDay = activityMetricObject.AvgClosesPerDay/dayDifference;

                    if((metricOldObject.oldNoOfOnTurfKnock+noOfOnTurfKnock) >0){                                                
                        activityMetricObject.OnTurfStartPerc = (metricOldObject.oldNoOfOnTurfStart+noOfOnTurfStartKnock)*100/(metricOldObject.oldNoOfOnTurfKnock+noOfOnTurfKnock);
                        
                        activityMetricObject.OnTurfContactPerc = (metricOldObject.oldNoOfOnTurfContact+noOfOnTurfContactKnock)*100/(metricOldObject.oldNoOfOnTurfKnock+noOfOnTurfKnock);
                    }
                    activityMetricObject.OnTurfKnocksPerc = (metricOldObject.oldNoOfOnTurfKnock+noOfOnTurfKnock)*100/(metricOldObject.oldTotalKnockTillDate+totalKnockTillDate);
                    metricOldObject.oldNoOfOnTurfStart += noOfOnTurfStartKnock;
                    metricOldObject.oldNoOfOnTurfContact += noOfOnTurfContactKnock;                        

                    activityMetricObject.DesposBet4To9PmPerc = (metricOldObject.oldNoOfDisposition4To9pm+noOfDisposition4To9pm)*100/(metricOldObject.oldTotalKnockTillDate+totalKnockTillDate);

                    metricOldObject.oldTotalKnockTillDate += totalKnockTillDate; 
                    metricOldObject.oldNoOfOnTurfKnock += noOfOnTurfKnock;
                    metricOldObject.oldNoOfDisposition4To9pm += noOfDisposition4To9pm;
                    activityMetricObject.AvgKncksPerDay = totalKnockTillDate/dayDifference;
                }
                ownrIdActWrappObjMap.put(taskOwnerId,activityMetricObject);                        
                ownerIdMetricOldDataWrapMap.put(taskOwnerId,metricOldObject);            
            }
          
            /* 
             *Generate user id and its manager id map for RGU Metric update            
            */      
            for(User userObject :[select Id ,ManagerId, Manager.ManagerId from User where Id IN : ownerIdSet LIMIT : (Limits.getLimitQueryRows()-Limits.getQueryRows()) ]){             
                if(userObject.ManagerId != null){
                    userIdManagerIdMap.put(userObject.Id, userObject.ManagerId);
                    dsrDssUserIdSet.add(userObject.ManagerId);
                    if(userObject.Manager.ManagerId != null){
                        userIdManagerIdMap.put(userObject.ManagerId, userObject.Manager.ManagerId);
                        dsmUserIdSet.add(userObject.Manager.ManagerId);
                    }
                }           
            }
            
            /* Add DSR id in common set to use further to fetch goal metric*/
            dsrDssUserIdSet.addAll(ownerIdSet);
            dsrDssUserIdSet.addAll(dsmUserIdSet);               
            /* Update Manager and Supervisor data base on users LOB Count To update RGU Metric */ 
            if(!todayOwnerIdMetricWrappListMap.isEmpty()){
               
                for(Id ownerId : todayOwnerIdMetricWrappListMap.keySet()){                                                           
                    Id managerId;                                   
                    MetricValueWrapper wrapperObj = new MetricValueWrapper();                   
                    if(todayOwnerIdMetricWrappListMap.containsKey(ownerId)){
                        wrapperObj = todayOwnerIdMetricWrappListMap.get(ownerId);                      
                    }                    
                    if(userIdManagerIdMap.containsKey(wrapperObj.userId)){
                        managerId = userIdManagerIdMap.get(wrapperObj.userId);                
                    }                                     
                    //Update data for user Manager's base on data in  newOwnrIdMetricWrappListMap that contains DSR knock data till date                                                           
                    while(managerId != null){                         
                        MetricValueWrapper wrappObjectManager = new MetricValueWrapper();                                                
                        if(todayOwnerIdMetricWrappListMap.containsKey(managerId)){
                            wrappObjectManager = todayOwnerIdMetricWrappListMap.get(managerId);                            
                        }                       
                        wrappObjectManager.userId = managerId;                                 
                        if(wrapperObj.videoCount > 0){
                            wrappObjectManager.videoCount += wrapperObj.videoCount;
                        }
                        if(wrapperObj.dataCount > 0){
                            wrappObjectManager.dataCount += wrapperObj.dataCount;
                        }
                        if(wrapperObj.voiceCount > 0){
                            wrappObjectManager.voiceCount += wrapperObj.voiceCount;
                        }
                        if(wrapperObj.houseCount > 0){
                            wrappObjectManager.houseCount += wrapperObj.houseCount;
                        }                                       
                        todayOwnerIdMetricWrappListMap.put(managerId, wrappObjectManager);                     
                        managerId = userIdManagerIdMap.get(managerId);                                                               
                    }                                                                             
                }
            }   
           
            /* Update data on Metric base on the LOB Count values store in Wrapper and Update metricUpdateMap for DSR,DSS */ 
            for(Goal goalObject : [SELECT Id, OwnerId ,(SELECT Id,Name,targetvalue,Status,CurrentValue FROM Metrics) FROM Goal WHERE Goal.Status =: GOAL_STATUS AND Goal.Name like '%RGU%' AND Goal.RecordTypeId =: GOAL_DIRECTSALES_RECORD_ID
                                         AND Goal.StartDate =: BYWEEK_COMMISION_START_DATE AND Goal.DueDate =: BYWEEK_COMMISION_END_DATE AND Goal.OwnerId IN : dsrDssUserIdSet LIMIT : (Limits.getLimitQueryRows()-Limits.getQueryRows())]){                   
                
                //Boolean used to check whether metric data for owner is already pass in previous match so to to take decision whether to increment or add        
                boolean isAllreadyRGUAddedTemp = false;
                MetricOldDataWrap metricOldWrapp = new MetricOldDataWrap();
                if(ownerIdMetricOldDataWrapMap.containsKey(goalObject.ownerId)){                    
                    metricOldWrapp = ownerIdMetricOldDataWrapMap.get(goalObject.ownerId);  
                    if(!metricOldWrapp.isAllreadyAddedRGU){
                        metricOldWrapp.isAllreadyAddedRGU = true;
                        ownerIdMetricOldDataWrapMap.put(goalObject.ownerId,metricOldWrapp);                        
                    }else{
                        isAllreadyRGUAddedTemp = metricOldWrapp.isAllreadyAddedRGU;                            
                    }                     
                    
                }else{
                    metricOldWrapp.isAllreadyAddedRGU = true;
                    ownerIdMetricOldDataWrapMap.put(goalObject.ownerId,metricOldWrapp);                   
                }                        
                for(Metric metricObject : goalObject.Metrics){
                    if(todayOwnerIdMetricWrappListMap.containsKey(goalObject.OwnerId)){                                         
                        MetricValueWrapper wrapperObj = todayOwnerIdMetricWrappListMap.get(goalObject.OwnerId);
                        Metric updatedMetricObject = updateMetricRecord(wrapperObj, metricObject, true, goalObject.OwnerId, isAllreadyRGUAddedTemp);
                        metricUpdateMap.put(updatedMetricObject.Id, updatedMetricObject);                 
                    }                       
                }                                                
            }
                                       
            
            /* Update data on Activity Metric base on the Knock done from start date of commission cycle till today for DSR only as it is for biweekly update  */ 
            for(Goal goalTemp : [SELECT Id, OwnerId,(SELECT Id,Name,targetvalue,CurrentValue,Status FROM Metrics) FROM Goal WHERE Goal.Status =: GOAL_STATUS AND Goal.Name like '%Activity%' AND Goal.RecordTypeId =: GOAL_DIRECTSALES_RECORD_ID
                                               AND Goal.StartDate =: BYWEEK_COMMISION_START_DATE AND Goal.DueDate =: BYWEEK_COMMISION_END_DATE   AND Goal.OwnerId IN : ownrIdActWrappObjMap.keySet() LIMIT : (Limits.getLimitQueryRows()-Limits.getQueryRows())]){      
               
                //Boolean use to check whether metric data for owner is already pass in previous match so to to take decision whether to increment or add
                boolean isAllreadyAddedTemp;              
                if(ownerIdMetricOldDataWrapMap.containsKey(goalTemp.OwnerId)){                    
                    MetricOldDataWrap activityMetricOldWrapp = ownerIdMetricOldDataWrapMap.get(goalTemp.OwnerId);
                    isAllreadyAddedTemp = activityMetricOldWrapp.isAllreadyAddedAcivity;                   
                    if(!isAllreadyAddedTemp){                        
                        activityMetricOldWrapp.isAllreadyAddedAcivity = true;
                        ownerIdMetricOldDataWrapMap.put(goalTemp.OwnerId, activityMetricOldWrapp);
                    }
                }
                
                ActivtyMetricValWrap activityWrappObj = ownrIdActWrappObjMap.get(goalTemp.OwnerId);
                for(Metric activtyMetricTemp : goalTemp.Metrics){                                                                   
                    if(AVG_CLOSE_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                            if(!isAllreadyAddedTemp){
                                activtyMetricTemp.CurrentValue = activityWrappObj.AvgClosesPerDay;      
                            }else{
                                activtyMetricTemp.CurrentValue = activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue+activityWrappObj.AvgClosesPerDay:null;
                            }                           
                    }else if(AVG_CONTACT_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                            if(!isAllreadyAddedTemp){
                                activtyMetricTemp.CurrentValue = activityWrappObj.AvgContctsPerDay;  
                            }else{
                                activtyMetricTemp.CurrentValue = activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue+activityWrappObj.AvgContctsPerDay:null;
                            }                            
                    }else if(AVG_DISCOVER_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                            if(!isAllreadyAddedTemp){
                                activtyMetricTemp.CurrentValue = activityWrappObj.AvgDiscoverPerDay;     
                            }else{
                                activtyMetricTemp.CurrentValue = activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue+activityWrappObj.AvgDiscoverPerDay:null;
                            }                         
                    }else if(AVG_ENGAGES_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                          
                            if(!isAllreadyAddedTemp){
                                activtyMetricTemp.CurrentValue = activityWrappObj.AvgEngagePerDay;      
                            }else{
                                activtyMetricTemp.CurrentValue = activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue+activityWrappObj.AvgEngagePerDay:null;
                            }
                    }else if(AVG_KNOCKS_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                       
                            if(!isAllreadyAddedTemp){
                                activtyMetricTemp.CurrentValue = activityWrappObj.AvgKncksPerDay;       
                            }else{
                                activtyMetricTemp.CurrentValue = activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue+activityWrappObj.AvgKncksPerDay:null;
                            }
                    }else if(AVG_POSITION_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                     
                            if(!isAllreadyAddedTemp){
                                activtyMetricTemp.CurrentValue = activityWrappObj.AvgPositionPerDay;        
                            }else{
                                activtyMetricTemp.CurrentValue = activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue+activityWrappObj.AvgPositionPerDay:null;
                            }     
                    }else if(AVG_STARTTOCONTACT_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                        
                            //activtyMetricTemp.CurrentValue = activityWrappObj.AvgStartToContact;  
                            activtyMetricTemp.CurrentValue = (activityWrappObj.StartToContact) * 100.00;
                    }else if(ONTURF_CONACT_PERC.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                            activtyMetricTemp.CurrentValue = activityWrappObj.OnTurfContactPerc;      
                    }else if(ONTURF_KNOCKS.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                            //activtyMetricTemp.CurrentValue = activityWrappObj.OnTurfKnocks; 
                            activtyMetricTemp.CurrentValue = activityWrappObj.OnTurfKnocksPerc; 
                    }else if(ONTURF_START_PERC.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                            activtyMetricTemp.CurrentValue = activityWrappObj.OnTurfStartPerc;      
                    }else if(AVG_START_PERDAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                            if(!isAllreadyAddedTemp){
                                activtyMetricTemp.CurrentValue = activityWrappObj.AvgStartPerDay;        
                            }else{
                                activtyMetricTemp.CurrentValue = activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue+activityWrappObj.AvgStartPerDay:null;
                            }                              
                    }else if(DISP_BETWN_4TO9PM.equalsIgnoreCase(activtyMetricTemp.Name)){
                            activtyMetricTemp.CurrentValue = activityWrappObj.DesposBet4To9PmPerc;                        
                    } 
                    activtyMetricTemp.CurrentValue= activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue.setscale(2): null;
                    Metric updatedMetricObject = updateXSPSDMMetricStatusPickList(activtyMetricTemp);  
                    metricUpdateMap.put(updatedMetricObject.Id, updatedMetricObject);   
                }           
            }             
           
            /* Update Metric Data And Job Status */
            if(!metricUpdateMap.isEMpty()){ 
                Database.SaveResult[] saveResult = Database.Update(metricUpdateMap.values(),false);
                if(jobStatus!=null && !jobStatus.isEmpty()){
                    for(Database.SaveResult result : saveResult) {
                        jobStatus[0].Total_Records_Processed__c ++;
                        if(!result.isSuccess()){                                                 
                            for(Database.Error error : result.getErrors()){
                                jobStatus[0].Number_Of_Fallouts__c  ++;
                                Integer len= Job_Status__c.Comments__c.getDescribe().getLength();
                                String tempMsg = string.IsBlank(jobStatus[0].Comments__c) ?  error.getMessage() + NEW_LINE : jobStatus[0].Comments__c + error.getMessage() + NEW_LINE;                                    
                                jobStatus[0].Comments__c=(tempMsg.length()>len)?tempMsg.substring(0,len):tempMsg;                                                                 
                             }
                        } else{}       
                    }
                    Database.update(jobStatus[0]);
                }
            }
                
                
           
        }catch(Exception e) {
            if(jobStatus!=null && !jobStatus.isEmpty()){
                Integer len= Job_Status__c.Comments__c.getDescribe().getLength();
                String tempMsg = string.IsBlank(jobStatus[0].Comments__c) ?  SYSTEM_EXCEPTION + e.getMessage() + NEW_LINE : jobStatus[0].Comments__c + SYSTEM_EXCEPTION + e.getMessage() +NEW_LINE;                                    
                jobStatus[0].Comments__c=(tempMsg.length() > len)?tempMsg.substring(0, len):tempMsg; Database.update(jobStatus[0]);   
            }           
        }                             
    }
    
   /*
    * Execute Finish logic after execution of batch records completed
    */
    global void finish(Database.BatchableContext bContext){
        //Add Job Status               
        List<Job_Status__c> jobStatus = getJobStatus(jobStatusId);       
        if(jobStatus!=null && !jobStatus.isEmpty()){            
            jobStatus[0].Batch_End_Time__c = Datetime.now();
            jobStatus[0].Status__c = String.isBlank(jobStatus[0].Comments__c) ? BATCH_COMPLETE_WITH_SUCCESS : BATCH_COMPLETE_WITH_FAIL ;              
            Database.update(jobStatus[0]);  
        }  
    }
       
   /* 
    * Get job status 
    */           
    public List<Job_Status__c> getJobStatus(Id jobStatusId) {
        return [SELECT Total_Records_Processed__c, Comments__c, Number_Of_Fallouts__c, 
                Batch_Start_Time__c, Batch_End_Time__c, Total_RGU_Activations_Processed__c, Total_RGU_Orders_Processed__c,
                Total_RGU_ORders_Upserted_Today__c 
                FROM Job_Status__c WHERE Status__c =: JOB_STATUS AND ID=: jobStatusId];
    }  

    /* 
    * Description : Use to set current value of Metric base on value in wrapper object 
    * Parameter   : wrapperMetricObj , metricObject
    */
    public Metric updateMetricRecord(MetricValueWrapper wrapperMetricObj,Metric metricObject,boolean isBiWeekly,Id ownerId,boolean isAllreadyRGUAddedTemp) {
        
        Metric updatedMetric = new  Metric();
                              
        if(VIDEO_METRIC.equalsIgnoreCase(metricObject.Name)){                            
            if(!isAllreadyRGUAddedTemp){
                 metricObject.CurrentValue = wrapperMetricObj.videoCount;                   
            }else{
                 metricObject.CurrentValue = metricObject.CurrentValue!=null?metricObject.CurrentValue+wrapperMetricObj.videoCount:null;
            }           
        }               
        else if(HSD_METRIC.equalsIgnoreCase(metricObject.Name)){                           
            if(!isAllreadyRGUAddedTemp){
                metricObject.CurrentValue = wrapperMetricObj.dataCount;
            }else{
                metricObject.CurrentValue = metricObject.CurrentValue!=null?metricObject.CurrentValue+wrapperMetricObj.dataCount:null;
            }
            
        }
        else if(VOICE_METRIC.equalsIgnoreCase(metricObject.Name)){                           
            if(!isAllreadyRGUAddedTemp){
                metricObject.CurrentValue = wrapperMetricObj.voiceCount;
            }else{
                metricObject.CurrentValue = metricObject.CurrentValue!=null?metricObject.CurrentValue+wrapperMetricObj.voiceCount:null;
            }
            
        }
        else if(XH_METRIC.equalsIgnoreCase(metricObject.Name)){                          
            if(!isAllreadyRGUAddedTemp){
                 metricObject.CurrentValue = wrapperMetricObj.houseCount;
            }else{
                metricObject.CurrentValue = metricObject.CurrentValue!=null?metricObject.CurrentValue+wrapperMetricObj.houseCount:null;
            }           
        } 
        
        if(isBiWeekly){           
           updatedMetric = updateXSPSDMMetricStatusPickList(metricObject);
        }        
        return updatedMetric;   
    
    }
  
    
   /*
    * This method use to set Metric status for XSP,SDM, ASM  base on current value and remaining days of commission cycle  
    */
    public Metric updateXSPSDMMetricStatusPickList(Metric oldMetric){
        Decimal progessPercVal = 0;        
        
        if(oldMetric.targetvalue >0 && oldMetric.currentvalue!=null){
            Integer roundCurrentVal = Math.round(oldMetric.currentValue);
            progessPercVal = roundCurrentVal*100/oldMetric.targetvalue;
        }
               
        if(progessPercVal<=25){
            oldMetric.Status=XSPSDM_REMAINING_DAYS >=10?BEHIND_STATUS:CRITICAL_STATUS;                       
        }else if(25<progessPercVal && progessPercVal<=75){
            if(XSPSDM_REMAINING_DAYS>=10){
                oldMetric.Status = ONTRACK_STATUS;
            }else{
                 oldMetric.Status=XSPSDM_REMAINING_DAYS>=5 && XSPSDM_REMAINING_DAYS<10?BEHIND_STATUS:CRITICAL_STATUS; 
            }                          
        }else if(75<progessPercVal && progessPercVal<100){
            oldMetric.Status = XSPSDM_REMAINING_DAYS>=5?ONTRACK_STATUS:BEHIND_STATUS;
        }else {
            oldMetric.Status = ONTRACK_STATUS;
        }
        return oldMetric;
    }
    
    
   /*
    * Wrapper class use to store knock count for user that made count on Today only
    */
    public class MetricValueWrapper{
        public Id userId;
        public Integer videoCount = 0;
        public Integer dataCount = 0;
        public Integer voiceCount = 0;
        public Integer houseCount = 0;
    }
    
   /*
    * Wrapper class use to store knock count from start date of commission cycle month
    */
    public class ActivtyMetricValWrap{
        public Id userId;
        public Decimal AvgKncksPerDay = 0;
        public Decimal AvgContctsPerDay = 0;
        public Decimal AvgEngagePerDay = 0;
        public Decimal AvgDiscoverPerDay = 0;
        public Decimal AvgPositionPerDay = 0;
        public Decimal AvgClosesPerDay = 0;
        public Decimal AvgStartPerDay = 0;
        public Decimal StartToContact = 0; 
        public Decimal OnTurfStartPerc = 0;
        public Decimal OnTurfContactPerc = 0;
        public Decimal OnTurfKnocksPerc = 0;
        public Decimal DesposBet4To9PmPerc = 0;
           
    }
    
   /*
    * Wrapper class use to store old value of Metric Parameter that's need to update in next batch 
    */
    public class MetricOldDataWrap{
        public Id userId;
        public boolean isAllreadyAddedAcivity = false;
        public boolean isAllreadyAddedRGU = false;
        public Decimal oldAvgStartVal = 0;
        public Decimal oldAvgContactVal = 0;
        public Decimal oldNoOfOnTurfStart = 0; 
        public Decimal oldNoOfOnTurfContact = 0;
        public Decimal oldNoOfOnTurfKnock = 0;    
        public Decimal oldTotalKnockTillDate = 0; 
        public Decimal oldNoOfDisposition4To9pm = 0;
        
    }    

}
/**********************************************************************************************************************************
Name : MetricDailyUpdateBatchNew
Description : This batch class created to update Goals and Metric value data on daily basis based on Knocks generated by Knock owner
Date : 15-Aug-2016
Author : Ritesh Saxena
Last Modified By : Ritesh Saxena  (redesigned to consider XSPs insted of Knocks in query list)
Last Modified By : Tejaswini Kasar (Metric daily update batch automation for handling Goal Trigger)
Last Modified Date : 25-Aug-2016
Last Modified By : Prateek Saxena (Changes for avg logic based on "number of days there was at least one disposition (any type) entered by the XSP during the bi-weekly cycle")
Last Modified Date : 20-Sept-2016(US762759)
Last Modified By : Amit Kumar Pradhan(Updating Goals and Metrics for Director)
Last Modified Date : 29-Dec-2016(US872123,US872120,US872118,US872117)
Last Modified By : Animesh Datta(West Division ASM/SDM/XSP RGU and Activity Goals to Monthly) 
***********************************************************************************************************************************/
global class MetricDailyUpdateBatchNew implements Database.Batchable<sObject>, Database.Stateful{ 

    /*
    * Data Member 
    */      
    private static final String BATCH_COMPLETE_WITH_SUCCESS = 'Completed Without Errors';
    private static final String BATCH_COMPLETE_WITH_FAIL = 'Completed With Errors';
    private static final String BATCH_JOB_NAME = 'MetricDailyUpdateBatchNew';
    private static final String JOB_STATUS = 'New';
    private static final String NEW_LINE = '\n';
    private static final String SYSTEM_EXCEPTION = 'System Exception - ';    
    private static final String RECORD_TYPE_SEPERATION = ';';
    private static final String JOB_COMMENT = ' ';
    private static final String JOB_NAME_SPACE =  ' - ';

    //Constant use to capture knock between 4pm to 9pm or 3pm to 7pm in winter(hour of knock)
    private Integer KNOCK_START_TIME = 0;
    private Integer KNOCK_END_TIME = 0;
    private Id jobStatusId = null; 
    private Integer XSPSDM_REMAINING_DAYS = 0; 
   
    private static final String PROFILE_ID_SEPERATION = ';';
    private static final String DIRECT_SALES_REPR_PROFILE_ID = System.Label.DirectSaleReprProfId;
    private static final String VIDEO_METRIC = 'Video';
    private static final String HSD_METRIC = 'HSD';
    private static final String VOICE_METRIC = 'Voice';
    private static final String XH_METRIC = 'XH';
    private static final String GOAL_STATUS = System.Label.GoalStatus; 
   
    //Knock Disposition type constants
    private static final String DISPOSITION_START = 'Start';
    private static final String DISPOSITION_CONTACT = 'Contact';
    private static final String DISPOSITION_ENGAGE = 'Engage';
    private static final String DISPOSITION_DISCOVER = 'Discover';
    private static final String DISPOSITION_POSITION = 'Position';
    private static final String DISPOSITION_CLOSE = 'Close';
    //Metric name constants
    private static final String AVG_CLOSE_PER_DAY = 'Average closes per day';
    private static final String AVG_CONTACT_PER_DAY = 'Average contacts per day';
    private static final String AVG_DISCOVER_PER_DAY = 'Average discovers per day';
    private static final String AVG_ENGAGES_PER_DAY = 'Average engages per day';
    private static final String AVG_KNOCKS_PER_DAY = 'Average Knocks per day';
    private static final String AVG_POSITION_PER_DAY = 'Average positions per day';
    private static final String AVG_STARTTOCONTACT_DAY = 'Start to contact rate';
    private static final String ONTURF_CONACT_PERC = 'On Turf Contacts%';
    private static final String ONTURF_KNOCKS = 'On Turf Knocks%'; 
    private static final String ONTURF_START_PERC = 'On Turf Start%';
    private static final String AVG_START_PERDAY = 'Average starts per day';
    private static final String DISP_BETWN_4TO9PM = 'Dispositions% Between 4-9pm';
    private static final String OWNER_STRING = 'owner';
    private static final Set<String> contactStringSet = new Set<String>{'Contact','Contacted','Engage','Discover','Position','Close','Start'};
    
    //Metric Status constants
    private static final String ONTRACK_STATUS = 'OnTrack';
    private static final String BEHIND_STATUS = 'Behind';
    private static final String CRITICAL_STATUS = 'Critical';    
    
    //Select all task with any sold lob 
    private static final String BIWEEKLY_STARTEND_CUST_SET = 'ByWeeklyStartAndEndDate';
    private static final String MONTHLY_STARTEND_CUST_SET = 'MonthlyStartAndEndDateDS';
    
    private static final String GOAL_DIRECTSALES_RECORD_ID = Schema.SObjectType.Goal.getRecordTypeInfosByName().get('Direct Sales').getRecordTypeId();
    private static final String KNOCK_RECORD_TYPE_LABEL = System.Label.Knock; 
    private static final String KNOCK_RECORD_TYPE_ID = Schema.SObjectType.Task.getRecordTypeInfosByName().get(KNOCK_RECORD_TYPE_LABEL.trim()).getRecordTypeId(); 
    private static final String DSM_PROFILE_ID = System.Label.DSMProfileIdLabel;
    private static final String MetricDailyUpdateBatchNew_ID = System.Label.MetricDailyUpdateBatchNewId;
    private Date COMMISION_START_DATE;
    private Date COMMISION_END_DATE;
    private Date TASK_COMMSION_END_DATE;
    
    private Boolean DAYS_GREATERTHEN_EQUALLS_TEN_TWENTY;
    private Boolean DAYS_GREATERTHEN_EQUALLS_FIVE_TEN;
    private Boolean DAYS_LESSTHEN_TEN_TWENTY;
    /* Constructor for batch class MetricDailyUpdateBatch with query as argument.
     * Pass the query while executing the batch in the below manner otherwise batch will not execute.
     * Sample queryString :-  'Select Id from User where ProfileId=: DIRECT_SALES_REPR_PROFILE AND Region__c IN ('California Market', 'Florida Region')'
     */
    public String queryString= '';
    public Boolean isWestDivision = false;
    
    global MetricDailyUpdateBatchNew(String query,Boolean isWest)
    {
        this.queryString = query;
        isWestDivision = isWest;
    }
    
   /*
    * Query execution to fetch all today's knock
    */
    global Database.QueryLocator start(Database.BatchableContext bContext){                               
        GoalTemplateDates__c csStartEndDateDates ;
        //Create Job Status Object
        Job_Status__c jobStatus = new Job_Status__c();
        jobStatus.Name = BATCH_JOB_NAME + JOB_NAME_SPACE  + Datetime.now();
        jobStatus.Status__c = JOB_STATUS;
        jobStatus.Total_Records_Processed__c = 0;
        jobStatus.Total_RGU_Activations_Processed__c = 0;
        jobStatus.Total_RGU_Orders_Processed__c = 0;
        jobStatus.Total_RGU_ORders_Upserted_Today__c = 0;
        jobStatus.Batch_Start_Time__c = Datetime.now();
        jobStatus.Batch_End_Time__c = Datetime.now();
        jobStatus.Comments__c = JOB_COMMENT;
        jobStatus.Number_Of_Fallouts__c = 0;
        Database.insert(jobStatus);  
        jobStatusId = jobStatus.Id;
        
        if(Test.isRunningTest()) {
            queryString+= ' Limit 10';
        } 
        
        if(isWestDivision){
            csStartEndDateDates = GoalTemplateDates__c.getInstance(MONTHLY_STARTEND_CUST_SET); //Fetching Monthly Goal Template Custom Setting Data           
        }else{
            csStartEndDateDates = GoalTemplateDates__c.getInstance(BIWEEKLY_STARTEND_CUST_SET);  //Fetching Biweekly Goal Template Custom Setting Data          
        }
        COMMISION_START_DATE = csStartEndDateDates.Current_Period_Start_Date__c;
        COMMISION_END_DATE =  csStartEndDateDates.Current_Period_Due_Date__c;
        TASK_COMMSION_END_DATE =  csStartEndDateDates.Current_Period_Due_Date__c.addDays(1);
        
        //Get knock disposition start and end time in hour to update Activity metric Average Dispositions Between 4-9pm parameter
        MatricDailyUpdateTimeZone__c timeZoneDetails = MatricDailyUpdateTimeZone__c.getInstance('KnockTimeZone');
        KNOCK_START_TIME = (Integer)timeZoneDetails.DispPmStartTime__c;
        KNOCK_END_TIME = (Integer)timeZoneDetails.DispPmEndTime__c;
        XSPSDM_REMAINING_DAYS = COMMISION_END_DATE != null?System.today().daysBetween(COMMISION_END_DATE):0;
        
        //Color coding logic for Monthly(West Division) and Biweekly(Other then West Division)
        if(isWestDivision){
            DAYS_GREATERTHEN_EQUALLS_TEN_TWENTY = XSPSDM_REMAINING_DAYS >= 20;
            DAYS_GREATERTHEN_EQUALLS_FIVE_TEN = XSPSDM_REMAINING_DAYS >= 10;
            DAYS_LESSTHEN_TEN_TWENTY = XSPSDM_REMAINING_DAYS < 20;
        }else{
            DAYS_GREATERTHEN_EQUALLS_TEN_TWENTY = XSPSDM_REMAINING_DAYS >= 10;
            DAYS_GREATERTHEN_EQUALLS_FIVE_TEN = XSPSDM_REMAINING_DAYS>= 5;
            DAYS_LESSTHEN_TEN_TWENTY = XSPSDM_REMAINING_DAYS < 10;
        }
        
        return Database.getQueryLocator(queryString);              
    }
    
   /*
    * Execute business logic to update Metrics
    */
    global void execute(Database.BatchableContext bContext, List<User> xspList){
               
        List<Job_Status__c> jobStatus = getJobStatus(jobStatusId);  
        try{                    
            Set<Id> startTodayDespTaskSet = new Set<Id>();               
            //todayOwnerIdMetricWrappListMap use to store knock LOB count by user for today     
            Map<Id,MetricValueWrapper> todayOwnerIdMetricWrappListMap = new Map<Id,MetricValueWrapper>(); 
            
            Map<Id,List<Task>> ownrIdTaskListMap = new Map<Id,List<Task>>();  
            Map<Id,ActivtyMetricValWrap> ownrIdActWrappObjMap = new Map<Id,ActivtyMetricValWrap>();  
            Map<Id,Id> userIdManagerIdMap = new Map<Id,Id>();            
            Map<Id, Metric> metricUpdateMap = new Map<Id, Metric>();
            Set<String> ownerIdSet = new Set<String>(); 
            Set<String> dsmUserIdSet = new Set<String>();  
            Set<String> dsrDssUserIdSet = new Set<String>(); 
            Set<Id> xspSet = new Set<Id>();
            List<AggregateResult> res = new List<AggregateResult>();
            Map<String,Decimal> countResult = new Map<String,Decimal>();
            
            for(User u: xspList){
                xspSet.add(u.Id);           
            }
           
            // Returns dates on which knock of any disposition is done - US762759 
            //res = [SELECT count(Id), OwnerId owner, DAY_IN_MONTH(createddate),CALENDAR_MONTH(createddate), CALENDAR_YEAR(createddate) FROM Task WHERE RecordTypeId=: KNOCK_RECORD_TYPE_ID AND   CreatedDate >= :BYWEEK_COMMISION_START_DATE AND CreatedDate < :TASK_COMMSION_END_DATE AND OwnerId IN :xspSet group by DAY_IN_MONTH(createddate),CALENDAR_MONTH(createddate),CALENDAR_YEAR(createddate), OwnerId];

            // changes as per US762759          
            for( AggregateResult result: [SELECT count(Id), OwnerId owner, DAY_IN_MONTH(Created_Date_Custom__c), CALENDAR_MONTH(Created_Date_Custom__c), CALENDAR_YEAR(Created_Date_Custom__c) FROM Task WHERE RecordTypeId=: KNOCK_RECORD_TYPE_ID AND Created_Date_Custom__c >= :COMMISION_START_DATE AND Created_Date_Custom__c < :TASK_COMMSION_END_DATE AND OwnerId IN :xspSet group by DAY_IN_MONTH(Created_Date_Custom__c), CALENDAR_MONTH(Created_Date_Custom__c), CALENDAR_YEAR(Created_Date_Custom__c), OwnerId] ){
                Decimal countTemp = 0;
                if(countResult.containsKey((String)result.get(OWNER_STRING))){
                    countTemp = countResult.get((String)result.get(OWNER_STRING));
                }
                countTemp++;
                countResult.put((String)result.get(OWNER_STRING),countTemp);
            } 
            
            
            //End Of changes US762759           
            for(Task taskTemp : [SELECT Timestamp__c, Knocked_Date__c , Id, CreatedDate, Created_Date_Custom__c, Hour_of_Day__c, Off_Turf__c, Disposition__c, HSI_Sold__c, Video_Sold__c, Voice_Sold__c, XH_Sold__c, OwnerId, Owner.ProfileId FROM Task WHERE RecordTypeId =: KNOCK_RECORD_TYPE_ID AND Created_Date_Custom__c >= :COMMISION_START_DATE AND Created_Date_Custom__c < :TASK_COMMSION_END_DATE AND OwnerId IN :xspSet]){                       
                                               
                /* Generate knock Task that to be Update in Activity Goal for DSR User only */              
                String tempId = taskTemp.Owner.ProfileID;
                String ShortId = tempId.substring(0, 15);
                if(DIRECT_SALES_REPR_PROFILE_ID == ShortId){                       
                    List<Task> taskListTemp = new  List<Task>();                                       
                    if(ownrIdTaskListMap.containsKey(taskTemp.OwnerId)){
                        taskListTemp = ownrIdTaskListMap.get(taskTemp.OwnerId);
                    }
                    taskListTemp.add(taskTemp);
                    ownrIdTaskListMap.put(taskTemp.OwnerId, taskListTemp);
                }                                              
            }
            /**   Decimal dayDifference = BYWEEK_COMMISION_START_DATE.daysBetween(Date.today());
            if(dayDifference>14){
                dayDifference=14;
            } **/
          
           /* 
            *  Generate data to update Goal Metric as Activity 
            */      
            for(Id taskOwnerId :  ownrIdTaskListMap.keySet()){
                
                ActivtyMetricValWrap activityMetricObject = new ActivtyMetricValWrap();
                //get day difference between today date and start date of current bi week commission cycle
                                                                        
                List<Task> taskTempList = ownrIdTaskListMap.get(taskOwnerId); 
                if(!taskTempList.isEmpty()){                   
                    Decimal totalKnockTillDate = taskTempList.size();
                    Decimal noOfOnTurfStartKnock = 0;
                    Decimal noOfOnTurfContactKnock = 0;
                    Decimal noOfOnTurfKnock = 0;
                    Decimal noOfDisposition4To9pm = 0;              
                                
                    /* Increment LOB Count for Deposition as Start For DSR Profile only, as Only DSR knocks */                                
                    for(Task taskTemp : ownrIdTaskListMap.get(taskOwnerId)){                   
                        if(taskTemp.Disposition__c == DISPOSITION_START){                                                                   
                            ownerIdSet.add(taskTemp.OwnerId);   
                            MetricValueWrapper wrappObject = new MetricValueWrapper();
                            if(todayOwnerIdMetricWrappListMap.containsKey(taskTemp.OwnerId)){              
                                wrappObject = todayOwnerIdMetricWrappListMap.get(taskTemp.OwnerId);                                                              
                            }                                          
                            wrappObject.userId = taskTemp.OwnerId;                
                            if(taskTemp.Video_Sold__c){                      
                                wrappObject.videoCount += 1;                        
                            }
                            if(taskTemp.HSI_Sold__c){
                                wrappObject.dataCount += 1;
                            }
                            if(taskTemp.Voice_Sold__c){
                                wrappObject.voiceCount += 1;
                            }
                            if(taskTemp.XH_Sold__c){
                                wrappObject.houseCount += 1;
                            }                                            
                            todayOwnerIdMetricWrappListMap.put(taskTemp.OwnerId,wrappObject);  
                        }
                       
                        Integer hourValue = 0;
                        String hourOfTheDay = taskTemp.Hour_of_Day__c;                        
                        if(hourOfTheDay != null){                       
                            hourValue = Integer.valueOf(hourOfTheDay.substringBefore('h'));
                        }                       
                        if(DISPOSITION_START.equalsIgnoreCase(taskTemp.Disposition__c)){
                            if(!taskTemp.Off_Turf__c){
                                noOfOnTurfStartKnock += 1;
                            }
                            activityMetricObject.AvgStartPerDay += 1;
                            activityMetricObject.totalNoOfStarts += 1;
                        }else if(DISPOSITION_ENGAGE.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgEngagePerDay += 1;
                        }else if(DISPOSITION_DISCOVER.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgDiscoverPerDay += 1;
                        }else if(DISPOSITION_POSITION.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgPositionPerDay += 1;
                        }else if(DISPOSITION_CLOSE.equalsIgnoreCase(taskTemp.Disposition__c)){
                            activityMetricObject.AvgClosesPerDay += 1;
                        }
                        if(!taskTemp.Off_Turf__c){
                            noOfOnTurfKnock += 1;
                        }
                        //base on user time zone we are calculating average disposition for knock
                        if(hourValue >= KNOCK_START_TIME && hourValue <= KNOCK_END_TIME){
                            noOfDisposition4To9pm +=1;
                        }
                        if(contactStringSet.contains(taskTemp.Disposition__c)){
                            // Changed the condition to include {'Contact','Contacted','Engage','Discover','Position','Close','Start'};
                            if(!taskTemp.Off_Turf__c){
                                noOfOnTurfContactKnock += 1;
                            }
                            activityMetricObject.AvgContctsPerDay += 1;
                            activityMetricObject.totalNoOfContacts +=1;
                        }                      
                    }
                    
                    
                    if(countResult.get(taskOwnerId) > 0){
                        activityMetricObject.AvgStartPerDay = activityMetricObject.AvgStartPerDay/countResult.get(taskOwnerId);
                        activityMetricObject.AvgContctsPerDay = activityMetricObject.AvgContctsPerDay/countResult.get(taskOwnerId);
                        activityMetricObject.AvgEngagePerDay = activityMetricObject.AvgEngagePerDay/countResult.get(taskOwnerId);
                        activityMetricObject.AvgDiscoverPerDay = activityMetricObject.AvgDiscoverPerDay/countResult.get(taskOwnerId);
                        activityMetricObject.AvgPositionPerDay = activityMetricObject.AvgPositionPerDay/countResult.get(taskOwnerId);
                        activityMetricObject.AvgClosesPerDay = activityMetricObject.AvgClosesPerDay/countResult.get(taskOwnerId);
                    }
                    
                    if(activityMetricObject.AvgContctsPerDay > 0){                        
                        activityMetricObject.StartToContact = (activityMetricObject.AvgStartPerDay/activityMetricObject.AvgContctsPerDay)*100.00;
                    } 
                    // Calculation changes as per US762757
                    if(activityMetricObject.totalNoOfStarts >0){ 
                        activityMetricObject.OnTurfStartPerc = (noOfOnTurfStartKnock/activityMetricObject.totalNoOfStarts)*100.00;
 
                    } 
                    // Calculation changes as per US762760
                    if(activityMetricObject.totalNoOfContacts >0){ 
                        activityMetricObject.OnTurfContactPerc = (noOfOnTurfContactKnock/activityMetricObject.totalNoOfContacts)*100.00; 
 
                    } 
                    if(noOfOnTurfKnock >0){                                                
                       // activityMetricObject.OnTurfStartPerc = (noOfOnTurfStartKnock/noOfOnTurfKnock)*100.00;                       
                      //  activityMetricObject.OnTurfContactPerc = (noOfOnTurfContactKnock/noOfOnTurfKnock)*100.00;
                        activityMetricObject.OnTurfKnocksPerc = (noOfOnTurfKnock/totalKnockTillDate)*100.00;                 
                    } 
                    if(noOfDisposition4To9pm>0){
                        activityMetricObject.DesposBet4To9PmPerc = (noOfDisposition4To9pm/totalKnockTillDate)*100.00;                        
                    }
                    if(countResult.get(taskOwnerId) > 0){
                        activityMetricObject.AvgKncksPerDay = totalKnockTillDate/countResult.get(taskOwnerId);                  
                    }
                     ownrIdActWrappObjMap.put(taskOwnerId,activityMetricObject);
                }
                    
            }
          
            /* 
             *Generate user id and its manager id map for RGU Metric update            
            */      
            for(User userObject :[select Id ,ManagerId, Manager.ManagerId, Manager.Manager.ManagerId from User where Id IN : ownerIdSet LIMIT : (Limits.getLimitQueryRows()-Limits.getQueryRows()) ]){             
                if(userObject.ManagerId != null){
                    userIdManagerIdMap.put(userObject.Id, userObject.ManagerId);
                    dsrDssUserIdSet.add(userObject.ManagerId);
                    if(userObject.Manager.ManagerId != null){
                        userIdManagerIdMap.put(userObject.ManagerId, userObject.Manager.ManagerId);
                        dsmUserIdSet.add(userObject.Manager.ManagerId);
                        
                        //Added for updating director RGU Goal
                        if(userObject.Manager.Manager.ManagerId != null){
                            userIdManagerIdMap.put(userObject.Manager.ManagerId, userObject.Manager.Manager.ManagerId);
                            dsmUserIdSet.add(userObject.Manager.Manager.ManagerId);                     
                        }
                        
                    }
                }           
            }
            
            /* Add DSR id in common set to use further to fetch goal metric*/
            dsrDssUserIdSet.addAll(ownerIdSet);
            dsrDssUserIdSet.addAll(dsmUserIdSet);               
            /* Update Manager and Supervisor data base on users LOB Count To update RGU Metric */ 
            if(!todayOwnerIdMetricWrappListMap.isEmpty()){
               
                for(Id ownerId : todayOwnerIdMetricWrappListMap.keySet()){                                                           
                    Id managerId;                                   
                    MetricValueWrapper wrapperObj = new MetricValueWrapper();                   
                    if(todayOwnerIdMetricWrappListMap.containsKey(ownerId)){
                        wrapperObj = todayOwnerIdMetricWrappListMap.get(ownerId);                      
                    }                    
                    if(userIdManagerIdMap.containsKey(wrapperObj.userId)){
                        managerId = userIdManagerIdMap.get(wrapperObj.userId);                
                    }                                     
                    //Update data for user Manager's base on data in  newOwnrIdMetricWrappListMap that contains DSR knock data till date                                                           
                    while(managerId != null){                         
                        MetricValueWrapper wrappObjectManager = new MetricValueWrapper();
                        wrappObjectManager.isManager=true;
                        if(todayOwnerIdMetricWrappListMap.containsKey(managerId)){
                            wrappObjectManager = todayOwnerIdMetricWrappListMap.get(managerId);                            
                        }                       
                        wrappObjectManager.userId = managerId;                                 
                        if(wrapperObj.videoCount > 0){
                            wrappObjectManager.videoCount += wrapperObj.videoCount;
                        }
                        if(wrapperObj.dataCount > 0){
                            wrappObjectManager.dataCount += wrapperObj.dataCount;
                        }
                        if(wrapperObj.voiceCount > 0){
                            wrappObjectManager.voiceCount += wrapperObj.voiceCount;
                        }
                        if(wrapperObj.houseCount > 0){
                            wrappObjectManager.houseCount += wrapperObj.houseCount;
                        }                                       
                        todayOwnerIdMetricWrappListMap.put(managerId, wrappObjectManager);                     
                        managerId = userIdManagerIdMap.get(managerId);                                                               
                    }                                                                             
                }
            }   
           
            /* Update data on Metric based on the LOB Count values store in Wrapper and Update metricUpdateMap for XSP,SDM & ASM */ 
            for(Goal goalObject : [SELECT Id, OwnerId ,(SELECT Id,Name,targetvalue,Status,CurrentValue FROM Metrics) FROM Goal WHERE Goal.Status =: GOAL_STATUS AND Goal.Name like '%RGU%' AND Goal.RecordTypeId =: GOAL_DIRECTSALES_RECORD_ID
                                         AND Goal.StartDate =: COMMISION_START_DATE AND Goal.DueDate =: COMMISION_END_DATE AND Goal.OwnerId IN : dsrDssUserIdSet LIMIT : (Limits.getLimitQueryRows()-Limits.getQueryRows())]){                   
                
                for(Metric metricObject : goalObject.Metrics){
                    if(todayOwnerIdMetricWrappListMap.containsKey(goalObject.OwnerId)){                                         
                        MetricValueWrapper wrapperObj = todayOwnerIdMetricWrappListMap.get(goalObject.OwnerId);
                        Metric updatedMetricObject = updateMetricRecord(wrapperObj, metricObject, goalObject.OwnerId);
                        metricUpdateMap.put(updatedMetricObject.Id, updatedMetricObject);                 
                    }                       
                }                                                
            }
                                                  
            /* Update data on Activity Metric base on the Knock done from start date of commission cycle till today for DSR only as it is for biweekly update  */ 
            for(Goal goalTemp : [SELECT Id, OwnerId,(SELECT Id,Name,targetvalue,CurrentValue,Status FROM Metrics) FROM Goal WHERE Goal.Status =: GOAL_STATUS AND Goal.Name like '%Activity%' AND Goal.RecordTypeId =: GOAL_DIRECTSALES_RECORD_ID
                                               AND Goal.StartDate =: COMMISION_START_DATE AND Goal.DueDate =: COMMISION_END_DATE AND Goal.OwnerId IN : ownrIdActWrappObjMap.keySet() LIMIT : (Limits.getLimitQueryRows()-Limits.getQueryRows())]){      
                               
                ActivtyMetricValWrap activityWrappObj = ownrIdActWrappObjMap.get(goalTemp.OwnerId);
                for(Metric activtyMetricTemp : goalTemp.Metrics){                                                                   
                    if(AVG_CLOSE_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                        activtyMetricTemp.CurrentValue = activityWrappObj.AvgClosesPerDay;      
                    }else if(AVG_CONTACT_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                        activtyMetricTemp.CurrentValue = activityWrappObj.AvgContctsPerDay;  
                    }else if(AVG_DISCOVER_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                        activtyMetricTemp.CurrentValue = activityWrappObj.AvgDiscoverPerDay;     
                    }else if(AVG_ENGAGES_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                          
                        activtyMetricTemp.CurrentValue = activityWrappObj.AvgEngagePerDay;      
                    }else if(AVG_KNOCKS_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                       
                        activtyMetricTemp.CurrentValue = activityWrappObj.AvgKncksPerDay;       
                    }else if(AVG_POSITION_PER_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                     
                        activtyMetricTemp.CurrentValue = activityWrappObj.AvgPositionPerDay;        
                    }else if(AVG_STARTTOCONTACT_DAY.equalsIgnoreCase(activtyMetricTemp.Name)){                                                        
                        activtyMetricTemp.CurrentValue = (activityWrappObj.StartToContact); 
                    }else if(ONTURF_CONACT_PERC.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                        activtyMetricTemp.CurrentValue = activityWrappObj.OnTurfContactPerc;      
                    }else if(ONTURF_KNOCKS.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                        activtyMetricTemp.CurrentValue = activityWrappObj.OnTurfKnocksPerc; 
                    }else if(ONTURF_START_PERC.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                        activtyMetricTemp.CurrentValue = activityWrappObj.OnTurfStartPerc;      
                    }else if(AVG_START_PERDAY.equalsIgnoreCase(activtyMetricTemp.Name)){                             
                        activtyMetricTemp.CurrentValue = activityWrappObj.AvgStartPerDay;        
                    }else if(DISP_BETWN_4TO9PM.equalsIgnoreCase(activtyMetricTemp.Name)){
                        activtyMetricTemp.CurrentValue = activityWrappObj.DesposBet4To9PmPerc;        
                    } 
                    activtyMetricTemp.CurrentValue= activtyMetricTemp.CurrentValue!=null?activtyMetricTemp.CurrentValue.setscale(2): null;
                   
                    Metric updatedMetricObject = updateMetricStatusPickList(activtyMetricTemp); 
                    metricUpdateMap.put(updatedMetricObject.Id, updatedMetricObject);                    
                }           
            }
           
            /* Update Metric Data And Job Status */
            if(!metricUpdateMap.isEMpty()){ 
                                
                Database.SaveResult[] saveResult = Database.Update(metricUpdateMap.values(),false);
                
                if(jobStatus!=null && !jobStatus.isEmpty()){
                    for(Database.SaveResult result : saveResult) {
                        jobStatus[0].Total_Records_Processed__c ++;
                        if(!result.isSuccess()){                                                 
                            for(Database.Error error : result.getErrors()){
                                jobStatus[0].Number_Of_Fallouts__c  ++;
                                Integer len= Job_Status__c.Comments__c.getDescribe().getLength();
                                String tempMsg = string.IsBlank(jobStatus[0].Comments__c) ?  error.getMessage() + NEW_LINE : jobStatus[0].Comments__c + error.getMessage() + NEW_LINE;                                    
                                jobStatus[0].Comments__c=(tempMsg.length()>len)?tempMsg.substring(0,len):tempMsg;                                                                 
                             }
                        } else{}       
                    }
                    Database.update(jobStatus[0]);
                }
            }             
           
        }catch(Exception e) {
            if(jobStatus!=null && !jobStatus.isEmpty()){
                Integer len= Job_Status__c.Comments__c.getDescribe().getLength();
                String tempMsg = string.IsBlank(jobStatus[0].Comments__c) ?  SYSTEM_EXCEPTION + e.getMessage() + NEW_LINE : jobStatus[0].Comments__c + SYSTEM_EXCEPTION + e.getMessage() +NEW_LINE;                                    
                jobStatus[0].Comments__c=(tempMsg.length() > len)?tempMsg.substring(0, len):tempMsg; Database.update(jobStatus[0]);   
            }           
        }                             
    }
    
   /*
    * Execute Finish logic after execution of batch records completed
    */
    global void finish(Database.BatchableContext bContext){
        //Add Job Status               
        List<Job_Status__c> jobStatus = getJobStatus(jobStatusId);       
        if(jobStatus!=null && !jobStatus.isEmpty()){            
            jobStatus[0].Batch_End_Time__c = Datetime.now();
            jobStatus[0].Status__c = String.isBlank(jobStatus[0].Comments__c) ? BATCH_COMPLETE_WITH_SUCCESS : BATCH_COMPLETE_WITH_FAIL ;              
            Database.update(jobStatus[0]);  
        } 
        //Goal Trigger is set to Active when MetricDailyUpdateBatchNew finishes
        Integer jobCount = [Select count() from AsyncApexJob where ApexClassID =: MetricDailyUpdateBatchNew_ID AND JobType='BatchApex' and CreatedDate=Today and Status IN ('Holding','Queued','Preparing','Processing')];
        if(jobCount == 0){
            TriggerSettings__c goalTriggerSetting = TriggerSettings__c.getInstance('GoalTrigger');
            goalTriggerSetting.isActive__c = true;
            update goalTriggerSetting;
        }
    }
       
   /* 
    * Get job status 
    */           
    public List<Job_Status__c> getJobStatus(Id jobStatusId) {
        return [SELECT Total_Records_Processed__c, Comments__c, Number_Of_Fallouts__c, 
                Batch_Start_Time__c, Batch_End_Time__c, Total_RGU_Activations_Processed__c, Total_RGU_Orders_Processed__c,
                Total_RGU_ORders_Upserted_Today__c 
                FROM Job_Status__c WHERE Status__c =: JOB_STATUS AND ID=: jobStatusId];
    }  

    /* 
    * Description : Use to set current value of Metric base on value in wrapper object 
    * Parameter   : wrapperMetricObj , metricObject
    */
    public Metric updateMetricRecord(MetricValueWrapper wrapperMetricObj,Metric metricObject,Id ownerId) {
        
        Metric updatedMetric = new  Metric();
                              
        if(VIDEO_METRIC.equalsIgnoreCase(metricObject.Name)){ 
             metricObject.CurrentValue = wrapperMetricObj.isManager?(metricObject.CurrentValue+wrapperMetricObj.videoCount):wrapperMetricObj.videoCount;
        }               
        else if(HSD_METRIC.equalsIgnoreCase(metricObject.Name)){
            metricObject.CurrentValue = wrapperMetricObj.isManager?(metricObject.CurrentValue+wrapperMetricObj.dataCount):wrapperMetricObj.dataCount;
        } 
        else if(VOICE_METRIC.equalsIgnoreCase(metricObject.Name)){
            metricObject.CurrentValue = wrapperMetricObj.isManager?(metricObject.CurrentValue+wrapperMetricObj.voiceCount):wrapperMetricObj.voiceCount;
        }
        else if(XH_METRIC.equalsIgnoreCase(metricObject.Name)){
            metricObject.CurrentValue = wrapperMetricObj.isManager?(metricObject.CurrentValue+wrapperMetricObj.houseCount):wrapperMetricObj.houseCount;
        } 
       
        updatedMetric = updateMetricStatusPickList(metricObject);
              
        return updatedMetric;   
    }
  
   
    /*
    * This method use to set Metric status for XSP,SDM, ASM  based on current value and remaining days(Both For Biweekly and Monthly)  
    */
    public Metric updateMetricStatusPickList(Metric oldMetric){
        Decimal progessPercVal = 0;        
        
        if(oldMetric.targetvalue >0 && oldMetric.currentvalue!=null){
            Integer roundCurrentVal = Math.round(oldMetric.currentValue);
            progessPercVal = roundCurrentVal*100/oldMetric.targetvalue;
        }
               
        if(progessPercVal<=25){
            oldMetric.Status = DAYS_GREATERTHEN_EQUALLS_TEN_TWENTY?BEHIND_STATUS:CRITICAL_STATUS;                       
        }else if(25<progessPercVal && progessPercVal<=75){
            if(DAYS_GREATERTHEN_EQUALLS_TEN_TWENTY){
                oldMetric.Status = ONTRACK_STATUS;
            }else{
                 oldMetric.Status = DAYS_GREATERTHEN_EQUALLS_FIVE_TEN && DAYS_LESSTHEN_TEN_TWENTY ?BEHIND_STATUS:CRITICAL_STATUS; 
            }                          
        }else if(75<progessPercVal && progessPercVal<100){
            oldMetric.Status = DAYS_GREATERTHEN_EQUALLS_FIVE_TEN ?ONTRACK_STATUS:BEHIND_STATUS;
        }else {
            oldMetric.Status = ONTRACK_STATUS;
        }       
        return oldMetric;
    }
    
    
   /*
    * Wrapper class use to store knock count for user that made count on Today only
    */
    public class MetricValueWrapper{
        public Id userId;
        public Integer videoCount = 0;
        public Integer dataCount = 0;
        public Integer voiceCount = 0;
        public Integer houseCount = 0;
        public boolean isManager=false;
    }
    
    
   /*
    * Wrapper class use to store knock count from start date of commission cycle month
    */
    public class ActivtyMetricValWrap{
        public Id userId;
        public Decimal AvgKncksPerDay = 0.00;
        public Decimal AvgContctsPerDay = 0.00;
        public Decimal AvgEngagePerDay = 0.00;
        public Decimal AvgDiscoverPerDay = 0.00;
        public Decimal AvgPositionPerDay = 0.00;
        public Decimal AvgClosesPerDay = 0.00;
        public Decimal AvgStartPerDay = 0.00;
        public Decimal StartToContact = 0.00; 
        public Decimal OnTurfStartPerc = 0.00;
        public Decimal OnTurfContactPerc = 0.00;
        public Decimal OnTurfKnocksPerc = 0.00; 
        public Decimal DesposBet4To9PmPerc = 0.00; 
        public Decimal totalNoOfStarts = 0.00;
        public Decimal totalNoOfContacts = 0.00;
    } 

}
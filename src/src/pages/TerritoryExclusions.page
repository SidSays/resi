<apex:page Controller="TerritoryExclusionsExtension" sidebar="false">
    <apex:includescript value="https://code.jquery.com/jquery-2.1.4.min.js" />
    <script src="{!URLFOR($Resource.queryParser2, 'edge.Core.js')}"></script>
    <script src="{!URLFOR($Resource.queryParser2, 'utils.js')}"></script>
    <script src="{!URLFOR($Resource.log4js, 'log4javascript.js')}"></script>

        <style type="text/css" > .smallLeftMargin {
            margin-left: 200px !important;
        }

        .leftMargin {
            margin-left: 200px !important;
        }

            .pagespinner {
                display: none;
            }

            #loading {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 1000;
                background-color: grey;
                opacity: .8;
                vertical-align: middle;
            }

            .ajax-loader {
                position: absolute;
                left: 50%;
                top: 50%;
                margin-left: -32px; /* -1 * image width / 2 */
                margin-top: -32px; /* -1 * image height / 2 */
                display: block;
            }

            #process_message {
                z-index: 2000;
                margin-top: 10px;
                color: white;
            }

            #info_msgs {
                margin: 5px;
            }
    </style>

    <body>
      <apex:form >

      <div id="success_msg_container" style="display:none;">
        <apex:pageMessage severity="confirm" strength="1">
          <div id="success_message">
          </div>
        </apex:pageMessage>
      </div>
      <div id="error_msg_container" style="display:none;">
        <apex:pageMessage severity="error" strength="1">
          <div id="error_message">
          </div>
        </apex:pageMessage>
      </div>
        <apex:pageBlock title="Territory Selection">
          <apex:pageBlockSection columns="1">
              <apex:pageblocksectionitem >
                  <select id="selectedLens">
                      <option value="" selected="true">None</option>
                  </select>
              </apex:pageblocksectionitem>
          </apex:pageBlockSection>

          <apex:pageBlockSection columns="1" >
              <form action="">
                <input type="radio" name="exclude" value="true"/>Exclude <br />
                <input type="radio" name="exclude" value="false"/>Include
              </form>
          </apex:pageBlockSection>
          <apex:pageBlockButtons location="bottom">
              <apex:commandbutton value="Save" immediate="true" rerender="message" styleclass="leftMargin" onclick="processTerritoryExclusions()" />
          </apex:pageBlockButtons>
        </apex:pageBlock>
      </apex:form>


  <script type="text/javascript">
    var debugEnabled= ('true' == '{!$CurrentPage.parameters.debug}');
    var logger = log4javascript.getLogger("main");
    var appender = new log4javascript.InPageAppender();
    logger.addAppender(appender);

    var saqlQueryOrig;
    var SORT_COLUMN,BATCH_SIZE,NBR_OF_PARALLEL_THREADS;
    $j = jQuery.noConflict();
    var processParams = {};
    var pollingFuncId;

    $j(document).ready(function(){
      // please note,
      // that IE11 now returns undefined again for window.chrome
      // and new Opera 30 outputs true for window.chrome
      // and new IE Edge outputs to true now for window.chrome
      // and if not iOS Chrome check
      // so use the below updated condition
      var isChromium = window.chrome,
          winNav = window.navigator,
          vendorName = winNav.vendor,
          isOpera = winNav.userAgent.indexOf("OPR") > -1,
          isIEedge = winNav.userAgent.indexOf("Edge") > -1,
          isIOSChrome = winNav.userAgent.match("CriOS");

      if( ! ( isChromium !== null && isChromium !== undefined &&
          vendorName === "Google Inc." && isOpera == false && isIEedge == false)) {
         // is not Google Chrome
        showProcessingOverlay(true);
        updateMessage("{!$Label.USE_CHROME_ERROR_MESSAGE}");

      }

      $j('#selectedLens').change(function(){
        if(this.value !=""){
          $j("#assignBtn").css("display","inline");
          $j("#territoryName").html("<b>"+this.selectedOptions[0].label+"</b>");
          $j("#territoryName").css("display","inline");
        }else{
          $j("#assignBtn").css("display","none");
          $j("#territoryName").css("display","none");
        }
      });
      Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.TerritoryExclusionsExtension.getAvailableLenses}',
                populateAvailableLens
        );
    });

    function showProcessingOverlay(show){
      if(show){
        $j("#loading").css("display","inline");
      }else{
        $j("#loading").css("display","none");
      }
    }
    
    function initAssign2Territory(){
      assign2Territory($j("#selectedLens option:selected").val());
    }

    function populateAvailableLens(result,event){
      for(var i=0;i<result.length;i++){
          $j('#selectedLens').append($j('<option>', {
              value: result[i].id,
              text : result[i].label
          }));

      }
    }

    function clearPageMessages(){
      if ($('#success_msg_container').is(':visible')){
        $j("#success_msg_container").css("display","none");
      }
      if ($('#error_msg_container').is(':visible')){
        $j("#error_msg_container").css("display","none");
      }
    }

    function processTerritoryExclusions(){
       clearPageMessages();
       if($j("#selectedLens option:selected").val() == 'None'){
         showErrorMessage('', 'Please select a lens', true);
       } else if(!$("input[name='exclude']:checked").val()){
           showErrorMessage('', 'Please select either \'Exclude\' or \'Include\'', true);
       } else {
         showProcessingOverlay(true);
         // This remoting call will use the page's timeout value
          Visualforce.remoting.Manager.invokeAction(
              '{!$RemoteAction.TerritoryExclusionsExtension.getLensData}',
              $j("#selectedLens option:selected").val(),
              getLensDataResponseAndExecuteBatch
          );
        }

    }

    function decodeHTMLEntities(text) {
        var entities = [
            ['apos', '\''],
            ['quot', '"'],
            ['amp', '&'],
            ['lt', '<'],
            ['gt', '>'],
            ['#x2F','/']
        ];

        for (var i = 0, max = entities.length; i < max; ++i)
            text = text.replace(new RegExp('&'+entities[i][0]+';', 'g'), entities[i][1]);

        return text;
    }

    function getLensDataResponseAndExecuteBatch(result, event) {
      if(event.status){
        updateMessage("Fetched lens metadata. Validating....");
        //logMessage(result);
        //logMessage(result.lens.state.query.query);
        var xmdStr = decodeHTMLEntities(result.xmdStr);
        result.xmd = JSON.parse(xmdStr);
        result.xmd.derivedMeasures = undefined;
        result.xmd.versionId=result.versionId;
        var queryStr = decodeHTMLEntities(result.lens.state.query.query);

        var filtersAndValues = JSON.parse(queryStr);

        //Make the Record Id the only column on the SAQL as that is the only field we need
        //to make an update to the Address object
        filtersAndValues.values = ["Id"];
        //Set the API Name of the Sort column based on the label
        SORT_COLUMN = result.sortColumn;
        NBR_OF_PARALLEL_THREADS=result.maxThreads;

        if(filtersAndValues.order){
          filtersAndValues.order=undefined;
        }

        if(filtersAndValues.limit){
          filtersAndValues.limit = undefined;
        }
        //With the sort column added, validate maximum columns allowed
        BATCH_SIZE = result.batchSize;
        var value = {
            lens: filtersAndValues,
            dataset: result.lens.dataset.id,
            xmd: result.xmd,
            lensName: result.lens.label,
            saql: null,
            error: null
        };
        var saqlToExec = getSAQL(result.lens.dataset.id,result.xmd,value,filtersAndValues);
        executeExclusionsBatch(saqlToExec, result.lens.dataset.id, result.lens.label);
      }else{
        showErrorMessage('Error occurred:'+event.message,true);
      }
    }

    function executeExclusionsBatch(saql, id, lensName){
      saql = cleanSaql(saql);

      Visualforce.remoting.Manager.invokeAction(
          '{!$RemoteAction.TerritoryExclusionsExtension.executeExclusionsBatch}',
            saql,
            $("input[name='exclude']:checked").val(),
            id,
            lensName,
          function(result,event){
            if(event.status){
              showSuccessMessage('Records have been submitted for processing');
            }else{
              showErrorMessage(result,'Error occurred:'+event.message,true);
            }
          }
      );
    }

    function cleanSaql(saql){
        var returnSaql = saql.split(';');
        for(var i = 0; i < returnSaql.length; i++){
          if(returnSaql[i].includes('limit')){
            returnSaql.splice(i, 1);
          }
        }

        return returnSaql.join(';');
    }

    function getSAQL(datasetId, xmd, json,filtersAndValues) {
      var finalSAQL;
      // Some overrides to core to do the parsing
      // Spring 16 (and beyond?) support
      edge.app.Data.prototype._createExtMeta = function(xmd) {
        this.extMeta._buildExtMeta(xmd);
      }

      edge.app.Data.prototype.setEdgemart = function(e) {
        this.edgemarts = [e]
      };

      EdgemartOverride = function(e,t) {
        this.id=e;
        this.verId=t
      };

      EdgemartOverride.prototype.getReference = function() {
        return this.id + "/" + this.verId;
      };

      var d = new edge.app.Data();
      d._createExtMeta(xmd);
      var em = new EdgemartOverride(datasetId, xmd.versionId);

      edge.app.esObjectRepo.appUser = {};
      edge.app.esObjectRepo.appUser.getTimezone = function() { return "America/Los_Angeles"; }; // just set a default
      edge.app.esObjectRepo.appUser.getLocale = function() { return "en"; }; // expecting a locale when parsing dates

      try {
        var builder = d._getSAQLBuilder();
        var nextVar = builder.make(filtersAndValues, [em], d.extMeta);
        finalSAQL = nextVar.build();

        // Convert count(dim) --> unique(dim)...DDA...
        var countRe = /count[(][\']([\w|\d]+)/g;
        var reMatch;
        while((reMatch = countRe.exec(json.saql)) !== null) {
          if(_.indexOf(allDims, reMatch[1]) > -1) {
            finalSAQL = finalSAQL.replace("count('" + reMatch[1], "unique('" + reMatch[1]).replace("count_" + reMatch[1], "unique_" + reMatch[1]);
          }
        }
      } catch(err) {
        json.error = err.stack;
      } finally {
        return finalSAQL;
      }
    }

    function showSuccessMessage(msg){
      $j("#success_message").html(msg);
      updateMessage('');
      showProcessingOverlay(false);
      $j("#success_msg_container").css("display","block");
    }

    function showErrorMessage(result,msg,show) {
      $j("#error_message").html(msg);
      if(show){
          if(result && result.fileIdList){
            result.tempFileIdList = result.fileIdList;
            cleanupTempfiles(result);
        }
        updateMessage('');
        showProcessingOverlay(false);

        $j("#error_msg_container").css("display","block");
      }else{
        $j("#error_msg_container").css("display","none");
      }
    }

    function updateMessage(msg){
      $j("#process_message").html(msg);
    }

    function logMessage(msg){
      if(debugEnabled){
        logger.debug(msg);
      }
    }
    </script>
  </body>
</apex:page>
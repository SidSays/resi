<apex:page showHeader="true" sidebar="false" controller="Export2ExcelController">

	<head>
        <apex:includeScript value="https://code.jquery.com/jquery-2.1.4.min.js"/>
		<script src="{!URLFOR($Resource.queryParser2, 'edge.Core.js')}"></script>
		<script src="{!URLFOR($Resource.queryParser2, 'utils.js')}"></script>
		<script src="{!URLFOR($Resource.log4js, 'log4javascript.js')}"></script>
		<style media="screen" type="text/css">

		.pagespinner{
			display:none;
		}
		#loading {  
                position:absolute;
                top:0;
                left:0;
                width:100%;
                height:100%;
                z-index:1000;
                background-color:grey;
                opacity: .8;
                vertical-align: middle;
        }	
        .ajax-loader {
            position: absolute;
            left: 50%;
            top: 50%;
            margin-left: -32px; /* -1 * image width / 2 */
            margin-top: -32px;  /* -1 * image height / 2 */
            display: block;     
        }
        #process_message {
            z-index:2000;
            margin-top: 10px;
            color: white;    
        }

        #info_msgs{
        	margin:5px;
        }
		</style>		
	</head>
	<body>
		<div id="loading" align="center" style="display:none;">
			<div class="ajax-loader">
		        <img src="{!$Resource.AjaxLoader}"/><br/>
		        <div id="process_message">
		        </div>
	        </div>
	    </div>
		<apex:pageMessage severity="info" strength="3">
			<ul id="info_msgs">
			 <li>Only lenses that have a <b><u>Values Table</u></b> visualization are allowed to be downloaded as CSV.</li><br/>
			 <li>Please ensure your lens only return a <b><u>maximum of 90,000 rows. Apply filters like Region, Division</u></b> etc.</li><br/>
			 <li>The data you wish to download as CSV can contain upto <b><u>{!$Label.MAX_EXPORT_COLUMNS} columns.</u></b></li> <br/>
			</ul>
		</apex:pageMessage>
		<div id="error_msg_container" style="display:none;">
			<apex:pageMessage severity="error" strength="1">
				<div id="error_message">
				</div>
			</apex:pageMessage>
		</div>
		<apex:pageBlock >
			<apex:pageBlockSection title="1. Select lens to download" collapsible="false" columns="1">
				<apex:pageBlockSectionItem >
					<select id="selectedLens">
						<option value="" selected="true">None</option>
	      			</select>
	      			<button style="display:none;" id="exportBtn" onClick="initiateExportToExcel()">Export to CSV</button>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
			<apex:pageBlockSection title="2. Download CSV file(s)" collapsible="false" columns="1">
				<apex:pageBlockSectionItem >
					<ul id="finalFiles">
					</ul>
				</apex:pageBlockSectionItem>
			</apex:pageBlockSection>
		</apex:pageBlock>	
	<script type="text/javascript">

		var debugEnabled= ('true' == '{!$CurrentPage.parameters.debug}');
		var logger = log4javascript.getLogger("main");
		var appender = new log4javascript.InPageAppender();
		logger.addAppender(appender);

		var saqlQueryOrig;
		var SORT_COLUMN,RECORDS_PER_FILE,BYTE_PER_FILE,LEADING_0_COLUMNS;
		var NBR_OF_PARALLEL_THREADS=3;
		$j = jQuery.noConflict();
		var processParams = {};
		var pollingFuncId;

		$j(document).ready(function(){
			// please note, 
			// that IE11 now returns undefined again for window.chrome
			// and new Opera 30 outputs true for window.chrome
			// and new IE Edge outputs to true now for window.chrome
			// and if not iOS Chrome check
			// so use the below updated condition
			var isChromium = window.chrome,
			    winNav = window.navigator,
			    vendorName = winNav.vendor,
			    isOpera = winNav.userAgent.indexOf("OPR") > -1,
			    isIEedge = winNav.userAgent.indexOf("Edge") > -1,
			    isIOSChrome = winNav.userAgent.match("CriOS");

			if( ! ( isChromium !== null && isChromium !== undefined && 
					vendorName === "Google Inc." && isOpera == false && isIEedge == false)) {
			   // is not Google Chrome
				showProcessingOverlay(true);
				updateMessage("{!$Label.USE_CHROME_ERROR_MESSAGE}");		
					
			} 

			$j('#selectedLens').change(function(){
				if(this.value !=""){
					$j("#exportBtn").css("display","inline");
				}else{
					$j("#exportBtn").css("display","none");
				}
			});
			Visualforce.remoting.Manager.invokeAction(
		            '{!$RemoteAction.Export2ExcelController.getAvailableLenses}',
		            populateAvailableLens
		    );
		});

		function showProcessingOverlay(show){
			if(show){
				$j("#loading").css("display","inline");
			}else{
				$j("#loading").css("display","none");
			}
		}
		function initiateExportToExcel(){
			exportToExcel($j("#selectedLens option:selected").val());
		}
		function populateAvailableLens(result,event){
			for(var i=0;i<result.length;i++){
			    $j('#selectedLens').append($j('<option>', { 
			        value: result[i].id,
			        text : result[i].label 
			    }));

			}
		}



		function exportToExcel(lensId){
		   showProcessingOverlay(true);
		   // This remoting call will use the page's timeout value
		    Visualforce.remoting.Manager.invokeAction(
		        '{!$RemoteAction.Export2ExcelController.getLensData}',
		        lensId, 
		        getLensDataResponse
		    );

		}

		function decodeHTMLEntities(text) {
		    var entities = [
		        ['apos', '\''],
		        ['quot', '"'],
		        ['amp', '&'],
		        ['lt', '<'],
		        ['gt', '>'],
		        ['#x2F','/']
		    ];

		    for (var i = 0, max = entities.length; i < max; ++i) 
		        text = text.replace(new RegExp('&'+entities[i][0]+';', 'g'), entities[i][1]);

		    return text;
		}


		
		function getLensDataResponse(result, event) { 
			if(event.status){
				updateMessage("Fetched lens metadata. Validating....");
				//logMessage(result);
				//logMessage(result.lens.state.query.query);
				var xmdStr = decodeHTMLEntities(result.xmdStr);
				result.xmd = JSON.parse(xmdStr);
				result.xmd.versionId=result.versionId;
				var queryStr = decodeHTMLEntities(result.lens.state.query.query);
				var filtersAndValues = JSON.parse(queryStr);

		    	//Set the API Name of the Sort column based on the label
		    	SORT_COLUMN = getAPINameForSortColumn(result.sortColumn,result.xmd);

		    	var colLabels = getColumnLabels(filtersAndValues.values,result.xmd);
		    	filtersAndValues.values = addComplexIdToColumns(SORT_COLUMN,JSON.stringify(filtersAndValues.values));
		    	
		    	if(filtersAndValues.order){
		    		filtersAndValues.order=undefined;
		    	}
		    	//With the sort column added, validate maximum columns allowed
				if(filtersAndValues.values.length > (result.maxColumns+1)){	
					showErrorMessage(result,result.lens.label + " has "+filtersAndValues.values.length+" columns. Maximum allowed is "+result.maxColumns+".",true);		
			    	showProcessingOverlay(false);
			    						return;
				}else{
				    RECORDS_PER_FILE = result.recordsPerTempFile;
				    BYTE_PER_FILE = result.bytesPerFile;
				    LEADING_0_COLUMNS = result.leadingZeroColumns;
				    var value = {
				        lens: filtersAndValues,
				        dataset: result.lens.dataset.id,
				        xmd: result.xmd,
				        lensName: result.lens.label,
				        saql: null,
				        error: null
				    };
				    var saqlToExec = getSAQL(result.lens.dataset.id,result.xmd,value,filtersAndValues);
				    saqlQueryOrig = saqlToExec;

				    getRowCount(saqlToExec,filtersAndValues,result.lens.label,colLabels);
				}			
			}else{
				showErrorMessage('Error occurred:'+event.message,true);
			}


		}


		function getSAQL(datasetId, xmd, json,filtersAndValues) {

			var finalSAQL;
			// Some overrides to core to do the parsing
			// Spring 16 (and beyond?) support
			edge.app.Data.prototype._createExtMeta = function(xmd) {
				this.extMeta._buildExtMeta(xmd);
			}

			edge.app.Data.prototype.setEdgemart = function(e) { 
				this.edgemarts = [e] 
			};

			EdgemartOverride = function(e,t) {
				this.id=e;
				this.verId=t
			};

			EdgemartOverride.prototype.getReference = function() {
				return this.id + "/" + this.verId;
			};
			
			var d = new edge.app.Data();
			d._createExtMeta(xmd);
			var em = new EdgemartOverride(datasetId, xmd.versionId);

			edge.app.esObjectRepo.appUser = {};
			edge.app.esObjectRepo.appUser.getTimezone = function() { return "America/Los_Angeles"; }; // just set a default
			edge.app.esObjectRepo.appUser.getLocale = function() { return "en"; }; // expecting a locale when parsing dates

			try {
				var builder = d._getSAQLBuilder();
				var nextVar = builder.make(filtersAndValues, [em], d.extMeta);
				finalSAQL = nextVar.build();

				// Convert count(dim) --> unique(dim)...DDA...
				var countRe = /count[(][\']([\w|\d]+)/g;
				var reMatch;
				while((reMatch = countRe.exec(json.saql)) !== null) {
					if(_.indexOf(allDims, reMatch[1]) > -1) {
						finalSAQL = finalSAQL.replace("count('" + reMatch[1], "unique('" + reMatch[1]).replace("count_" + reMatch[1], "unique_" + reMatch[1]);
					}
				}
			} catch(err) {
				json.error = err.stack;
			} finally {
				return finalSAQL;	
			}
		}



		function getAPINameForSortColumn(complexIdLabel,xmd){
			for(var i=0;i<xmd.dimensions.length;i++){
				if(xmd.dimensions[i].label.startsWith('Postal')){
					logMessage(xmd.dimensions[i].label);
				}
				if(xmd.dimensions[i].label==complexIdLabel){
					return xmd.dimensions[i].origin;
				}
			}
		}
		function addComplexIdToColumns(sortColAPIName,valuesStr){
			var columns = JSON.parse(valuesStr);
			var idx=0;
			for(idx=0;idx<columns.length;idx++){
				//Found Prop1_Complex_ID__c as a selected column
				if(sortColAPIName == columns[idx]){
					return columns;
				}
			}
			columns[idx] = sortColAPIName;
			return columns;
		}
		function getColumnLabels(colAPINames,xmd){
			var apiName2Labels = {};
			for(var i=0;i<xmd.dimensions.length;i++){
				
				apiName2Labels[xmd.dimensions[i].origin]=xmd.dimensions[i].label;
			}
			for(var i=0;i<xmd.measures.length;i++){
				
				apiName2Labels[xmd.measures[i].origin]=xmd.measures[i].label;
			}
			for(var i=0;i<xmd.dates.length;i++){
				
				apiName2Labels[xmd.dates[i].origin]=xmd.dates[i].label;
			}
			var colLabels = [];
			for(var i=0;i<colAPINames.length;i++){
				if(apiName2Labels[colAPINames[i]] ){
					colLabels[i]=apiName2Labels[colAPINames[i]];
				}else{
					colLabels[i]=colAPINames[i];
				}
			}
			return colLabels;
		}

		function getRowCount(saqlQuery,filtersAndValues,lensName,columnLabels){
		   // This remoting call will use the page's timeout value
		    Visualforce.remoting.Manager.invokeAction(
		        '{!$RemoteAction.Export2ExcelController.getRowCount}',
		        {	
		        	"saqlQuery":saqlQuery,
		        	"columns":filtersAndValues.values,
		        	"lensName":lensName,
		        	"columnLabels":columnLabels,
			        "sortColumn":SORT_COLUMN,
			        "recordsPerTempFile":RECORDS_PER_FILE,
			        "bytesPerFile":BYTE_PER_FILE,
			        "leadingZeroColumns":LEADING_0_COLUMNS
		        }, 
		        function(result,event){
		        	if(event.status){
		        		result.saqlQuery = saqlQueryOrig;

						updateMessage("Total Records :"+result.recordCount);
						if(result.recordCount == 0){
							showErrorMessage(result,result.lensName + " returned no matching records. ",true);
						}else if(result.recordCount<=result.maxRecords){
			        		parallelProcessExport2Excel(result);
						}else{
							showErrorMessage(result,result.lensName + " returned "+result.recordCount+" records. Maximum allowed for download is "+result.maxRecords+".\n\nEnsure you have applied Region and/or Division filters to the lens.",true);
						}
		        	}else{
						showErrorMessage(result,'Error occurred:'+event.message,true);

		        	}
		        }
		    );
		}


		function showErrorMessage(result,msg,show) {
			$j("#error_message").html(msg);
			if(show){
	    		if(result && result.fileIdList){
	    			result.tempFileIdList = result.fileIdList;
	    			cleanupTempfiles(result);
				}
				updateMessage('');
				showProcessingOverlay(false);

				$j("#error_msg_container").css("display","block");
			}else{
				$j("#error_msg_container").css("display","none");
			}
		}
		function updateMessage(msg){
			$j("#process_message").html(msg);
		}

		function parallelProcessExport2Excel(params){
			if(params.recordCount<6000){
				NBR_OF_PARALLEL_THREADS=1;
			}
			var maxRecordsPerProcess = params.recordCount/NBR_OF_PARALLEL_THREADS;
			var round2Nearest2K = Math.round(maxRecordsPerProcess/2000)*2000;


			var totalRecsSplit = 0;
			var idx;
			for(idx=0;idx<NBR_OF_PARALLEL_THREADS-1;idx++){
				var newParam = JSON.parse(JSON.stringify(params));
				newParam.processName='Thread-'+(idx+1);
				newParam.currRecordCount = (idx)*round2Nearest2K;
				newParam.currentChunk = newParam.currRecordCount/2000;
				newParam.recordCount = newParam.currRecordCount+round2Nearest2K;
				totalRecsSplit +=newParam.recordCount;
				processParams[newParam.processName] = newParam;
			}
			var newParam = JSON.parse(JSON.stringify(params));
			newParam.processName='Thread-'+(idx+1);
			newParam.currRecordCount = idx*round2Nearest2K;
			newParam.recordCount = params.recordCount;
			newParam.currentChunk = newParam.currRecordCount/2000;
			processParams[newParam.processName] = newParam;
			
			pollingFuncId = setInterval(isProcessingComplete,10000);
			for(var i=1;i<=NBR_OF_PARALLEL_THREADS;i++){
				exportToExcelStep2(processParams['Thread-'+i]);
			}
		}	

		function isProcessingComplete(){
			var completedProcesses=0; 
			var recordsProcesssed = 0,totalRecordCount=0;
			var prevRecordCount=0;
			for(var i=1;i<=NBR_OF_PARALLEL_THREADS;i++){
				var procParam = processParams['Thread-'+i];
				//logMessage(procParam.processName+ ',currRecordCount = '+procParam.currRecordCount+
				//			 ',recordCount='+procParam.recordCount+',prevRecordCount='+prevRecordCount);
				if(procParam.currRecordCount == procParam.recordCount ){
					logMessage(procParam.processName +' completed.');
					completedProcesses++;
				}else{
					recordsProcesssed+=procParam.currRecordCount-prevRecordCount;
					totalRecordCount=procParam.recordCount;
					prevRecordCount=procParam.recordCount;
				}
			}
			logMessage(completedProcesses + ' of '+NBR_OF_PARALLEL_THREADS + ' processes 	complete');
			if(completedProcesses == NBR_OF_PARALLEL_THREADS){
				clearInterval(pollingFuncId);
				var columns;
				var combinedFileIdList = new Array();
				var idx;
				for(idx=1;idx<=NBR_OF_PARALLEL_THREADS;idx++){
					combinedFileIdList = combinedFileIdList.concat(processParams['Thread-'+idx].fileIdList);
				}
				var result = {
					"tempFileIdList":combinedFileIdList,
					"fileIdList":combinedFileIdList,
			        "bytesPerFile":BYTE_PER_FILE,
			        "columns":processParams['Thread-'+(idx-1)].columns,
			        "lensName":processParams['Thread-'+(idx-1)].lensName,
			        "columnLabels":processParams['Thread-'+(idx-1)].columnLabels,
				};

				consolidateFiles(result);
		 	    
			}else{
				updateMessage('Processed '+recordsProcesssed +' of '+totalRecordCount+' records');
			}
		}
		function exportToExcelStep2(params){
		    Visualforce.remoting.Manager.invokeAction(
		        '{!$RemoteAction.Export2ExcelController.exportToCSV}',
		        params,
		        handleExportToCSVResponse,
		        { buffer: false, timeout: 60000 }
		    );

		}			

		function handleExportToCSVResponse(result,event){
			logMessage(result.processName+' - Processed '+result.currRecordCount +' of '+result.recordCount);						
			result.saqlQuery = saqlQueryOrig;
			if(event.status){
				//Set the master process params's currRecordCount and fileIdList to the latest recordCount for this process 		
				processParams[result.processName].currRecordCount =  result.currRecordCount;		
				processParams[result.processName].fileIdList =  result.fileIdList;		
				processParams[result.processName].columns =  result.columns;		
				processParams[result.processName].lensName =  result.lensName;
				if(result.currRecordCount < result.recordCount){
					exportToExcelStep2(result);
		    	}
		    }else{
				showErrorMessage('Error occurred:'+event.message,true);
		    }
		}


		function consolidateFiles(params){
			updateMessage('Finalizing CSV files for export');
		    Visualforce.remoting.Manager.invokeAction(
		        '{!$RemoteAction.Export2ExcelController.consolidateFiles}',
		        params,
		        handleConsolidateFileResponse 
		    );

		}

		function handleConsolidateFileResponse(result,event){
			if(event.status){
				logMessage('File Id list size='+result.fileIdList.length+',file content size='+result.processMetrics.content_size.metricValue+', fileIds.length='+result.processMetrics.tempFileCount.metricValue);
		   		logMessage('currentChunk= '+result.currentChunk);
		   		logMessage('Heap size = '+result.processMetrics.heapSize.metricValue + ' of '+ result.processMetrics.heapSize.metricLimit)
		   		logMessage('Final File Ids = '+result.finalFileIdList);
		   		//continue to consolidate until the file list is empty
		    	if(result.fileIdList.length>0){
		       			consolidateFiles(result);
		    	}else{
		    		//Cleanup the temp files that were created
					updateMessage('Deleting temporary files...');
		    		cleanupTempfiles(result);
		    	}
	    	}else{
				showErrorMessage('Error occurred:'+event.message,true);
	    	}

		}

		function cleanupTempfiles(params){
		    Visualforce.remoting.Manager.invokeAction(
		        '{!$RemoteAction.Export2ExcelController.cleanup}',
		        params,
		        handleCleanupTempfilesResponse 
		    );

		}
		function handleCleanupTempfilesResponse(result,event){
				if(event.status){
					logMessage('Cleanup of temp files complete.End of file download process');
					for(var i=0;i<result.finalFileIdList.length;i++){
		  			$j("#finalFiles").append('<li><a href="/sfc/servlet.shepherd/version/download/'+result.finalFileIdList[i].id+'" target="_blank">'+result.finalFileIdList[i].name+'</a></li>');
					}
					updateMessage('');
		    		showProcessingOverlay(false);

				}else{
					showErrorMessage('Error occurred:'+event.message,true);
				}
		    

		}

		function logMessage(msg){
			if(debugEnabled){
				logger.debug(msg);
			}
		}


	</script>
	</body>

</apex:page>
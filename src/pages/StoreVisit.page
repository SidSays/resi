<apex:page standardController="Account" extensions="StoreVisitController,ActiveVisitCheckController" docType="html-5.0">
<html ng-app="StoreVisitApp" ng-controller="StoreVisitController" ng-init="initializeData()" >
 
    <link href="{!URLFOR($Resource.IndirectResources, 'styles/IndirectApp.css')}" rel="stylesheet" />
    <script src="{!URLFOR($Resource.IndirectResources, 'scripts/jquery.min.js')}" type="text/javascript" />
    <script type='text/javascript' src='/canvas/sdk/js/publisher.js'></script>
    <script>
    (function(){
        try{
            var a=navigator.userAgent;
            if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('OS/8')!=-1||a.indexOf('OS 8')!=-1)&&(a.indexOf('Safari')==-1)){
            var s=document.createElement('style');
            s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}";
            document.getElementsByTagName('head')[0].appendChild(s);
            }
        }catch(e){}
    })();
    </script>
    <!-- Generated Style -->
    <style>
        *, body, div, p, h1, h2, h3, h4, h5, h6, li {font-family: 'ProximaNovaSoft-Regular', helvetica, arial, sans-serif !important; font-weight:normal;}
        body {background-color: #f0f1f2;}
        h1 {font-size:1.3rem;}
        h2.section-title {background-color:#fff; border-bottom:1px solid #dadee2; display:block; font-size:.82rem; margin:0; padding:10px 3%; text-transform:uppercase; width:94%;}
        .subhead {color:#aaa; display:block; font-size:.8rem; margin:0 0 2px;}
        body button, .visit-button {-webkit-appearance:none; background:none repeat scroll 0 0 #fff; border:1px solid #ccc; border-radius:8px; font-size:1rem; font-weight:bold; padding:10px;}
        .visit-button.start {background-color:#4ab471;}
        .visit-button.stop {background-color:#4eb1cb;}
        .add-activity {background-color:#f9fafb; color:#157dfa; float:right; font-size:.81rem; margin: -18px 0; padding: 19px 20px;}
        .section {border-bottom:1px solid #ddd; font-size:1.1rem; margin:0; padding:3%; width:94%;}
        .required {color:#c8001d;font-weight:bold;}
        .complete:after {content:'\2713'; color:#0a0; float:right; font-size:1.3rem;font-weight:bold; margin:0 3% 0 0;}
        .start-stop {float:left;}
        .timer {float:right; margin:12px 0 0;}
        .progress {clear:both;}
        .visit-item:last-child {border:none;}
        #ci-header {padding: 15px 3%;}
        #ci-message {border:none; font-size:1rem;}
        #ci-activities {padding:0; width:100%;}

        .progress {border:1px solid #aaa; border-radius:3px; margin:0 0 15px; padding:4px; position:relative; overflow:hidden; text-align:center;}
        .meter {background-color:#4ab471; height:30px; position:absolute;top:0;left:0;z-index:0;}
        .progress-label {font-size: 0.9rem; position:relative;}
        .required-text {color: #d61f26; font-weight: bold;}

        .popup{background-color:#fff; border-radius:10px; display:none; font-size:1.2rem; margin:0; padding:0; position: fixed; top: 30px; left:5%; width:90%; z-index: 9999;}
        .popup-content {padding:15px;}
        .popup-buttons {border-top:1px solid #ddd; }
        .popup-button {cursor:pointer; display:inline-block; padding:15px 0; text-align: center; width:49%;}
        .popup-overlay{background: rgba(196, 196, 196, .85); height: 100%; opacity: 0; position: fixed; top: 0; left: 100%; width: 100%;}
        .overlay .popup-overlay {opacity: 1; left: 0}

        .accordionLabel {border-bottom:1px solid #ddd; cursor:pointer; padding: 18px 0 15px 3%; width:97%;}
        .accordionContent {background-color:#fff; padding:0 5%; overflow-y:hidden; width:90%;}
        .icon-accordion {background: url("/resource/IndirectResources/images/icon-arrow.png") no-repeat scroll 8px 8px transparent; display: inline-block; height: 12px; margin: -5px 0 0; padding: 8px; vertical-align: middle; width: 12px;}

        #ci-activities, .simpleAccordion, .accordionContent {-webkit-transform: translate3d(0,0,0);}

        #ci-activities, .simpleAccordion, .accordionContent, .icon-accordion {transition-property:all; transition-duration: .5s; transition-timing-function: cubic-bezier(0, 1, 0.5, 1);}
        .accordionContent.open {max-height:none; overflow-y:auto; padding:15px 5%;}
        .accordionContent .store-list li:after {content: "〉"; float: right; font-weight: bold;}
        .icon-accordion.open {-webkit-transform: rotate(90deg); -moz-transform: rotate(90deg); -ms-transform: rotate(90deg); -o-transform: rotate(90deg);}
        #ci-notes textarea {width:100%;}
    </style>

    <!-- Manual Style -->
    <style type="text/css">

        #ci-header > div {
            display: inline-block;
        }

        .back-arrow {
            -webkit-transform: rotate(180deg);
            -moz-transform: rotate(180deg);
            -ms-transform: rotate(180deg);
            -o-transform: rotate(180deg);
            transform: rotate(180deg);
            font-size: 25px;
        }

        #loading-message {
            display: none;
            position: fixed;
            text-align: center;
            top: 50%;
            left: 50%;
            font-size: 24pt;
        }

        #loading-message > .loading-content {
            position: relative;
            left: -50%;
            top: -50%;
        }

        .visit-status {
            font-size: 12pt;
            font-weight: bold;
        }

        .visit-active {
            color: #AF0700;
        }

        .visit-complete {
            color: green;
        }

        .add-task {
            float: none;
            color: #157dfa;
        }

        .tasks-section {
            padding-top: 0;
        }

        .summary-section {
            padding-bottom: 20px;
        }

        .popup-content p {
            padding: 0 15px;
        }

        .popup-overlay {
            background-color: transparent;
        }

    </style>

    <apex:form >
    
        <div id="ci-header" class="section" onclick="retailSales.goToSObject('{!StoreVisit.Store__c}');">
            <div class="back-arrow">
                &#10140;
            </div>
            <div>
                <span class="subhead">Store Visit</span>
                <h1>
                    <apex:outputText value="{!IF(VisitSummary.StoreDisplayName != null, VisitSummary.StoreDisplayName, 'Prospect')}" />
                </h1>
            </div>
        </div>

        <apex:outputPanel id="visitHeader" layout="block">

            <apex:outputPanel layout="block" styleClass="section summary-section" rendered="{!VisitSummary.IsVisitComplete}">
                <c:StoreVisitSummary visitSummary="{!VisitSummary}" useStandardStylesheets="false" />
                <input type="button" class="visit-button" value="Email Summary" 
                    onclick="retailSales.goToUrl('/apex/StoreVisitMail?id={!StoreVisit.Id}');" />
            </apex:outputPanel>
            
            <apex:outputPanel rendered="{!NOT(VisitSummary.IsVisitComplete)}">

                <apex:outputPanel layout="block" rendered="{!NOT(IsOtherVisitActive)}">

                    <div id="ci-message" class="section">
                        <p>
                            <span class="required-text">
                                There <apex:outputText value=" {!IF(VisitSummary.NumberOfRemainingActivities == 1, 'is', 'are')} {!VisitSummary.NumberOfRemainingActivities}" /> required sales <apex:outputText value=" {!IF(VisitSummary.NumberOfRemainingActivities == 1, 'activity', 'activities')}" /> needed to complete this visit
                            </span> 
                        </p>
                    </div>
                    <div class="section">
                        <div class="progress">
                            <div class="meter" style="width: {!VisitSummary.PercentOfCompletedActivities}%; background-color:rgb(78,180, {!(205 - VisitSummary.PercentOfCompletedActivities)});"></div>
                            <div class="progress-label">
                                <span id="meter-value">
                                    <apex:outputText value="{!VisitSummary.PercentOfCompletedActivities}% complete" />
                                </span>
                            </div>
                        </div>
                        <div class="start-stop">
                            <!-- <button id="start-stop">Start</button> -->
                            <input type="button" value="{!IF(VisitSummary.IsVisitActive,'Stop','Start')}" id="start-stop" class="visit-button start" />
                            <span style="display:none;">Store visit complete</span>
                            <!-- Easy rebind for when the button is rerendered -->
                            <script type="text/javascript">
                                (function() {
                                    if (typeof retailSales !== 'undefined' && retailSales) {
                                        retailSales.bindStartStop();
                                    }
                                })();
                            </script>
                        </div>
                        <div class="timer">00:00:00</div>
                        <br clear="all" />
                    </div>

                </apex:outputPanel>

                <apex:outputPanel layout="block" rendered="{!IsOtherVisitActive}" styleClass="section">
                    <p>
                        <apex:outputText value="You can not start a store visit for {!VisitSummary.StoreDisplayName}" />
                    </p>
                    <p>
                        A visit is active for another Store.  <a href="#" onclick="retailSales.goToUrl('/apex/StoreVisit?id={!ActiveStoreId}');">Click Here</a> to go to the active Store Visit.
                    </p>
                </apex:outputPanel>

            </apex:outputPanel>

        </apex:outputPanel>

        <h2 class="section-title">Sales Activities</h2>
        <div id="ci-activities" class="section">
            <apex:outputPanel id="activityList" layout="block" styleClass="simpleAccordion">

                <apex:repeat value="{!RequiredStoreActivities}" var="activity">
                    <apex:variable value="{!activity.StoreActivityCategory}" var="activityCategory" />
                    <div class="accordionLabel {!IF(activityCategory.Number_Required__c > 0, 'required', '')}">
                        <span class="icon-accordion"></span>
                        <apex:outputText value="{!activityCategory.Store_Activity_Category__c}" />
                        <apex:outputPanel styleClass="add-activity" onclick="retailSales.addStoreActivity(event, '{!HTMLENCODE(activityCategory.Record_Type_Name__c)}');" rendered="{!VisitSummary.IsVisitActive}">+ Add</apex:outputPanel>
                    </div>

                    <div class="accordionContent">
                        <ul class="store-list">
                            <apex:repeat value="{!activity.StoreActivities}" var="storeActivity">
                                <li class="visit-item" onclick="retailSales.prepareStoreActivity('{!HTMLENCODE(storeActivity.Id)}');">
                                    <apex:outputText value="{!storeActivity.Name}" />
                                </li>
                            </apex:repeat>
                        </ul>
                    </div>
                    
                </apex:repeat> 
            </apex:outputPanel>
        </div>

        <apex:outputPanel styleClass="section-title" rendered="{!IsProspectVisit}" >
            <h2 class="section-title">Store Name</h2>
            <div id="ci-notes" class="section">
                <apex:inputText value="{!StoreVisit.Prospect_Store_Name__c}" rendered="{!IsProspectVisit}" />
            </div>
        </apex:outputPanel>

        <h2 class="section-title">Tasks</h2>
        <apex:outputPanel layout="block" id="tasksSection" styleClass="section tasks-section">

            <div class="accordionContent">

                <ul class="store-list">
                    <apex:repeat value="{!VisitTasks}" var="visitTask">
                        <li class="visit-item" onclick="retailSales.goToSObject('{!HTMLENCODE(visitTask.Id)}');">
                            <apex:outputText value="{!visitTask.Subject}" />
                        </li>
                    </apex:repeat>
                </ul>

            </div>

            <ul class="store-list">
                <li class="visit-item">
                    <apex:outputPanel styleClass="add-task" rendered="{!OR(VisitSummary.IsVisitActive, VisitSummary.IsVisitComplete)}"
                        onclick="addTask();">
                        + Add Task
                    </apex:outputPanel>
                </li>
            </ul>

        </apex:outputPanel>

        <h2 class="section-title">Notes</h2>
                <apex:outputPanel layout="block" id="notesSection" style="border-bottom:1px solid #ddd;font-size:1.1rem; margin:0; padding:3%;">
                    <apex:inputField value="{!StoreVisit.Notes__c}" style="width:100%;" />                
                    <input type="button" value="Save" class="visit-button" onclick="saveStoreVisit();" />
                </apex:outputPanel>




        <div id="geofence-warning" class="popup">        
            <apex:outputPanel id="popupContent" styleClass="popup-content">  
                <apex:repeat value="{!ValidationResult.Errors}" var="error">
                    <p>
                        <apex:outputText value="{!error}" />
                    </p>
                </apex:repeat>
             <!--   <p>You may continue but the visit will be flagged as non-compliant.</p> -->
            </apex:outputPanel>
            <div class="popup-buttons">
                   <div class="popup-button" id="popup-confirm">Confirm</div>
             <div class="popup-button" id="popup-cancel">Cancel</div>
            </div>
        </div>
        <div class="popup-overlay"></div>
        <div id="loading-message">
            <img src="{!$Resource.retail_sales_loading}" alt="Loading" class="loading-content" />
        </div> 

        <apex:actionStatus id="loadingStatus" onstart="retailSales.startLoading();" onstop="retailSales.stopLoading();" />

        <apex:actionFunction name="validateCheckIn" action="{!validateStartVisit}" 
            oncomplete="retailSales.startValidationComplete();"
            rerender="popupContent,mergeFields,visitHeader,notesSection,activityList,tasksSection" status="loadingStatus">
            <apex:param name="lat" assignTo="{!UserLocation.Latitude}" value=""/>
            <apex:param name="long" assignTo="{!UserLocation.Longitude}" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="validateCheckOut" action="{!validateStopVisit}" 
            oncomplete="retailSales.stopValidationComplete(); "
            rerender="popupContent,mergeFields,visitHeader,notesSection,activityList,tasksSection" status="loadingStatus">
            <apex:param name="lat" assignTo="{!UserLocation.Latitude}" value=""/>
            <apex:param name="long" assignTo="{!UserLocation.Longitude}" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="startVisit" action="{!startVisit}" 
            oncomplete="retailSales.startConfirmed();"
            rerender="popupContent,mergeFields,visitHeader,notesSection,activityList,tasksSection" status="loadingStatus">
            <apex:param name="lat" assignTo="{!UserLocation.Latitude}" value=""/>
            <apex:param name="long" assignTo="{!UserLocation.Longitude}" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="stopVisit" action="{!stopVisit}" 
            oncomplete="retailSales.stopConfirmed();"
            rerender="popupContent,mergeFields,visitHeader,notesSection,activityList,tasksSection" status="loadingStatus">
            <apex:param name="lat" assignTo="{!UserLocation.Latitude}" value=""/>
            <apex:param name="long" assignTo="{!UserLocation.Longitude}" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="createStoreActivityRecord" action="{!addStoreActivity}"
            oncomplete="retailSales.bindStartStop();"
            rerender="activityList,popupContent,mergeFields,visitHeader,notesSection" status="loadingStatus">
            <apex:param value="" name="selectedRecordType" assignTo="{!SelectedRecordType}" />
        </apex:actionFunction>
        <apex:actionFunction name="setActivityLocation" action="{!setActivityLocation}" 
            oncomplete="retailSales.goToSObject(retailSales.lastClickedActivityId);" 
            rerender="activityList,popupContent,mergeFields,visitHeader,notesSection" status="loadingStatus">
            <apex:param name="activityId" assignTo="{!SelectedActivityId}" value="" />
            <apex:param name="lat" assignTo="{!UserLocation.Latitude}" value="" />
            <apex:param name="long" assignTo="{!UserLocation.Longitude}" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="addTask" action="{!addTask}" rerender="tasksSection" status="loadingStatus" />
        <apex:actionFunction name="saveStoreVisit" action="{!saveStoreVisit}" status="loadingStatus"
            rerender="popupContent,notesSection,mergeFields" />

        <apex:outputPanel layout="block" id="mergeFields">
            <script type="text/javascript">
                var retailSales = (function(retailSales) {
                    retailSales.mergeFields = {
                        isVisitActive : {!VisitSummary.IsVisitActive},
                        isVisitComplete : {!VisitSummary.IsVisitComplete},
                        validationResult : {
                            isValid : {!ValidationResult.IsValid},
                            errors : [],
                            isFatal : {!ValidationResult.IsFatal}
                        },
                        visitStartDateTimeMs : {!VisitStartDateTimeMs}
                    };

                    <apex:repeat value="{!ValidationResult.Errors}" var="error">
                        retailSales.mergeFields.validationResult.errors.push(
                            '{!JSENCODE(error)}'
                            );
                    </apex:repeat>

                    return retailSales;
                })(retailSales || {});
            </script>
        </apex:outputPanel>

    </apex:form>
   
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
    <script src="/soap/ajax/15.0/connection.js" type="text/javascript"></script>
    <script src="/soap/ajax/15.0/apex.js" type="text/javascript"></script>

    <script type="text/javascript">
       
        // override focus on load
        function setFocusOnLoad() {}

        var retailSales = (function(retailSales, $) {
            var start = 0,
                timer;

            retailSales.lastClickedActivityId;

            retailSales.goToSObject = function(sobjectId) {
                if (sobjectId == "" || sobjectId== null) {
                    sforce.one.navigateToURL('/apex/RetailSales');
                }
                else {
                    sforce.one.navigateToSObject(sobjectId);
                }
            };

            retailSales.goToUrl = function(url) {
                sforce.one.navigateToURL(url);
            };
            
            retailSales.prepareStoreActivity = function(activityId, position){
                retailSales.lastClickedActivityId = activityId;

                function foundLocation(position) {
                    setActivityLocation(retailSales.lastClickedActivityId, position.coords.latitude, position.coords.longitude);
                }

                function failedToFindLocation() {
                    retailSales.goToSObject(activityId);
                }

                getPosition(foundLocation, failedToFindLocation);
            }

            retailSales.geoPopup = function(onConfirm, onCancel) {
                $('html').addClass('overlay');
                $("#geofence-warning").show();

                $popupButtons = $("#geofence-warning").find('.popup-button');
                $popupButtons.unbind('click');

                if (onConfirm) {
                    $("#popup-confirm").on('click', onConfirm);
                }

                if (onCancel) {
                    $("#popup-cancel").on('click', onCancel);
                }

                $popupButtons.on("click", function () {
                    retailSales.closePopup();
                });
            }

            retailSales.closePopup = function () {
                $('html').removeClass('overlay');
                $("#geofence-warning").hide();
            }

            retailSales.startConfirmed = function() {
                if (retailSales.mergeFields.validationResult.isFatal){
                    var errorsString = retailSales.mergeFields.validationResult.errors.join('\n');
                    alert(errorString);
                    return;
                }
                $("#start-stop").val('Stop');
                $("#start-stop").removeClass('start').addClass('stop');
                startTimer();
            }

            retailSales.startValidationComplete = function() {
                if (!retailSales.mergeFields.validationResult.isValid) {
                    retailSales.geoPopup(function() {

                        getPosition(function(position) {
                            startVisit(position.coords.latitude, position.coords.longitude);
                        }, function() {
                            startVisit(null, null);
                        });
                        
                    });

                    return;
                }

                retailSales.startConfirmed();
            }

            retailSales.stopConfirmed = function() {
                if (retailSales.mergeFields.validationResult.isFatal){
                    var errorsString = retailSales.mergeFields.validationResult.errors.join('\n');
                    alert(errorString);
                    return;
                }
                $(".start-stop span").show();
                stopTimer();
            }

            retailSales.stopValidationComplete = function() {

                function cancel() {
                    $("#start-stop").show();
                }

                if (!retailSales.mergeFields.validationResult.isValid) {
                    retailSales.geoPopup(function() {

                        getPosition(function(position) {
                            stopVisit(position.coords.latitude, position.coords.longitude);
                        }, function() {
                            stopVisit(null, null);
                        });

                    }, cancel);

                    return;
                }

                retailSales.stopConfirmed();
            }

            function startTimer() {
                start = retailSales.mergeFields.visitStartDateTimeMs;
                timer = setInterval(upDateTime, 1000);
            }

            function stopTimer() {
                clearInterval(timer);
            }

            function startLocation(position) {
                $("#start-stop").prop('disabled', false);
                validateCheckIn(position.coords.latitude, position.coords.longitude);
            }

            function stopLocation(position) { 
                $("#start-stop").prop('disabled', false);
                validateCheckOut(position.coords.latitude, position.coords.longitude);
            }

            function locationError() {
                var userConfirmed;

                if ({!IsValidationRequired}) {
                    userConfirmed = confirm(
                    'Your location could not be retrieved, please check your settings. \n' +
                    'You may continue but the visit will be flagged as non-compliant.'
                    );
                }
                else {
                    userConfirmed = true;
                }

                return userConfirmed;
            }

            function locationErrorStart(error) {
                $("#start-stop").prop('disabled', false);

                if (locationError()) {
                    validateCheckIn(null,null);
                }
            }

            function locationErrorStop(error) {
                $("#start-stop").prop('disabled', false);

                if (locationError()) {
                    validateCheckOut(null, null);
                }
            }

            function msToTime(ms) {
                var seconds = parseInt((ms/1000)%60), 
                    minutes = parseInt((ms/(1000*60))%60), 
                    hours = parseInt((ms/(1000*60*60))%24),
                    days = parseInt((ms/(1000*60*60*24))%7);

                days = (days < 10) ? "0" + days : days;
                hours = (hours < 10) ? "0" + hours : hours;
                minutes = (minutes < 10) ? "0" + minutes : minutes;
                seconds = (seconds < 10) ? "0" + seconds : seconds;


                return days + ":" + hours + ":" + minutes + ":" + seconds;
            }

            function upDateTime() {
                if (Date.now() < start) {
                    start = Date.now();
                }
                $('.timer').html( msToTime(Date.now() - start) );   
            }

            function getPosition(onLocationSuccess, onLocationError, options){
                if (!options) {
                    options = {
                        enableHighAccuracy: true,
                        timeout: 1000,
                        maximumAge: 0
                    };
                }

                navigator.geolocation.getCurrentPosition(onLocationSuccess, onLocationError, options);
            }

            $.fn.simpleAccordion = function() {
                this.on( "click", ".accordionLabel", function() {
                    var next = $(this).next();

                    if (next.is(':visible')) {
                        next.hide();
                    } else {    
                        next.show();
                    }
                });
             
                return this;
            };
 
            retailSales.bindStartStop = function() {

                $("#start-stop").on("click", function(e) {
                    var $this = $(this);
                    $this.prop('disabled', true);
                    var label = $this.val();

                    if (label === "Start"){                                                                   
                        Visualforce.remoting.Manager.invokeAction(
                            'ActiveVisitCheckController.isOtherVisitActive','{!$CurrentPage.parameters.id}',
                            function(result, event){                            
                                if(event.status){                                     
                                     if(result.trim().length>0){    
                                        var currentStore = "{!VisitSummary.StoreDisplayName}";
                                        var oldActiveStore = result.trim();
                                        var message = "You are checked into \""+ oldActiveStore +"\". By clicking “OK” you will be checked out of \""+ oldActiveStore + "\" and checked into \""+ currentStore + 
                                            "\". By clicking “Cancel” you will remain checked into \""+oldActiveStore +"\".";                                           
                                        var comfirmMessage = confirm(message);                                      
                                        if(comfirmMessage == true){
                                            Visualforce.remoting.Manager.invokeAction("ActiveVisitCheckController.setCompletedStatus",'{!$CurrentPage.parameters.id}'
                                           ,function(result, event){},{escape: true});  
                                            getPosition(startLocation, locationErrorStart);  
                                        }else{                                                                                       
                                            $("#start-stop").prop('disabled', false);
                                        }
                                        
                                    }else{
                                        getPosition(startLocation, locationErrorStart);                                       
                                    }                                                                 
                                }
                            }, 
                            {escape: false}
                        );                                               
                    }   
                    if (label === "Stop") { 
                        getPosition(stopLocation, locationErrorStop);
                    }   
                });
            }

            function init() {

                retailSales.bindStartStop();

                $('.simpleAccordion').simpleAccordion();

                if (retailSales.mergeFields.isVisitActive) {
                    retailSales.startConfirmed();
                } else if (retailSales.mergeFields.isVisitComplete) {
                    retailSales.stopConfirmed();
                }
            };

            init();

            retailSales.addStoreActivity = function(event, recordTypeName) {
                event.stopPropagation();
                if (!retailSales.mergeFields.isVisitActive) {
                    return;
                }

                createStoreActivityRecord(recordTypeName);
            };

            retailSales.startLoading = function() {
                $('html').addClass('overlay');
                $('#loading-message').show();
            }

            retailSales.stopLoading = function() {
                $('#loading-message').hide();
                if (!$("#geofence-warning").is(':visible')) {
                    $('html').removeClass('overlay');
                }
            }

            return retailSales;

        })(retailSales || {}, jQuery);

        (function() {

            // subscribe to the showPanel event and show the submit button
            Sfdc.canvas.publisher.subscribe({
                name: "publisher.showPanel",
                onData: function(event) {
                    Sfdc.canvas.publisher.publish({
                        name: "publisher.setValidForSubmit",
                        payload: true
                    });
                }
            });

            // subscribe to the submit press and close the window
            Sfdc.canvas.publisher.subscribe({
                name: "publisher.post",
                onData: function(event) {
                    Sfdc.canvas.publisher.publish({
                        name: "publisher.close",
                        payload: true
                    });
                }
            })
        })();

    </script>
</html>    

</apex:page>
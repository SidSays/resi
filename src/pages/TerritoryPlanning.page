<apex:page showHeader="true" sidebar="false" controller="TerritoryPlanningExtension">

  <head>
        <apex:includeScript value="https://code.jquery.com/jquery-2.1.4.min.js"/>
    <script src="{!URLFOR($Resource.queryParser2, 'edge.Core.js')}"></script>
    <script src="{!URLFOR($Resource.queryParser2, 'utils.js')}"></script>
    <script src="{!URLFOR($Resource.log4js, 'log4javascript.js')}"></script>
    <style media="screen" type="text/css">

    .pagespinner{
      display:none;
    }
    #loading {  
                position:absolute;
                top:0;
                left:0;
                width:100%;
                height:100%;
                z-index:1000;
                background-color:grey;
                opacity: .8;
                vertical-align: middle;
        } 
        .ajax-loader {
            position: absolute;
            left: 50%;
            top: 50%;
            margin-left: -32px; /* -1 * image width / 2 */
            margin-top: -32px;  /* -1 * image height / 2 */
            display: block;     
        }
        #process_message {
            z-index:2000;
            margin-top: 10px;
            color: white;    
        }

        #info_msgs{
          margin:5px;
        }
    </style>    
  </head>
  <body>
    <div id="loading" align="center" style="display:none;">
      <div class="ajax-loader">
            <img src="{!$Resource.AjaxLoader}"/><br/>
            <div id="process_message">
            </div>
          </div>
      </div>
    <apex:pageMessage severity="info" strength="3">
      <ul id="info_msgs">
       <li>Only lenses that have a <b><u>Values Table</u></b> visualization displayed below.</li><br/>
       <li>Please ensure the lens you select includes atleast <b><u>1 Census Tract and 1 region</u></b> in the filter criteria.</li></ul>
    </apex:pageMessage>
    <div id="error_msg_container" style="display:none;">
      <apex:pageMessage severity="error" strength="1">
        <div id="error_message">
        </div>
      </apex:pageMessage>
    </div>
    <apex:pageBlock title="Territory Assignment">
      <apex:pageBlockSection collapsible="false" columns="2">
        <apex:pageBlockSectionItem >
            Territory Name
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <div id="territoryName">&lt;name of the lens selected below.&gt;</div>
        </apex:pageBlockSectionItem>
       <apex:pageBlockSectionItem >
            Territory owner
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            {!$User.FirstName} {!$User.LastName} 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <div id="territoryName">Select the lens for your territory</div>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <select id="selectedLens">
            <option value="" selected="true">None</option>
              </select>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
              <button style="display:none;" id="assignBtn" onClick="initAssign2Territory()">Assign to Territory</button>
        </apex:pageBlockSectionItem>
      </apex:pageBlockSection>
    </apex:pageBlock> 
  <script type="text/javascript">

    var debugEnabled= ('true' == '{!$CurrentPage.parameters.debug}');
    var logger = log4javascript.getLogger("main");
    var appender = new log4javascript.InPageAppender();
    logger.addAppender(appender);

    var saqlQueryOrig;
    var SORT_COLUMN,BATCH_SIZE,NBR_OF_PARALLEL_THREADS;
    $j = jQuery.noConflict();
    var processParams = {};
    var pollingFuncId;

    $j(document).ready(function(){
      // please note, 
      // that IE11 now returns undefined again for window.chrome
      // and new Opera 30 outputs true for window.chrome
      // and new IE Edge outputs to true now for window.chrome
      // and if not iOS Chrome check
      // so use the below updated condition
      var isChromium = window.chrome,
          winNav = window.navigator,
          vendorName = winNav.vendor,
          isOpera = winNav.userAgent.indexOf("OPR") > -1,
          isIEedge = winNav.userAgent.indexOf("Edge") > -1,
          isIOSChrome = winNav.userAgent.match("CriOS");

      if( ! ( isChromium !== null && isChromium !== undefined && 
          vendorName === "Google Inc." && isOpera == false && isIEedge == false)) {
         // is not Google Chrome
        showProcessingOverlay(true);
        updateMessage("{!$Label.USE_CHROME_ERROR_MESSAGE}");    
          
      } 

      $j('#selectedLens').change(function(){
        if(this.value !=""){
          $j("#assignBtn").css("display","inline");
          $j("#territoryName").html("<b>"+this.selectedOptions[0].label+"</b>");
          $j("#territoryName").css("display","inline");
        }else{
          $j("#assignBtn").css("display","none");
          $j("#territoryName").css("display","none");
        }
      });
      Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.TerritoryPlanningExtension.getAvailableLenses}',
                populateAvailableLens
        );
    });

    function showProcessingOverlay(show){
      if(show){
        $j("#loading").css("display","inline");
      }else{
        $j("#loading").css("display","none");
      }
    }
    function initAssign2Territory(){
      assign2Territory($j("#selectedLens option:selected").val());
    }
    function populateAvailableLens(result,event){
      for(var i=0;i<result.length;i++){
          $j('#selectedLens').append($j('<option>', { 
              value: result[i].id,
              text : result[i].label 
          }));

      }
    }



    function assign2Territory(lensId){
       showProcessingOverlay(true);
       // This remoting call will use the page's timeout value
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.TerritoryPlanningExtension.getLensData}',
            lensId, 
            getLensDataResponse
        );

    }

    function decodeHTMLEntities(text) {
        var entities = [
            ['apos', '\''],
            ['quot', '"'],
            ['amp', '&'],
            ['lt', '<'],
            ['gt', '>'],
            ['#x2F','/']
        ];

        for (var i = 0, max = entities.length; i < max; ++i) 
            text = text.replace(new RegExp('&'+entities[i][0]+';', 'g'), entities[i][1]);

        return text;
    }


    
    function getLensDataResponse(result, event) { 
      if(event.status){
        updateMessage("Fetched lens metadata. Validating....");
        //logMessage(result);
        //logMessage(result.lens.state.query.query);
        var xmdStr = decodeHTMLEntities(result.xmdStr);
        result.xmd = JSON.parse(xmdStr);
        result.xmd.derivedMeasures = undefined;
        result.xmd.versionId=result.versionId;
        var queryStr = decodeHTMLEntities(result.lens.state.query.query);
        var filtersAndValues = JSON.parse(queryStr);

        //Make the Record Id the only column on the SAQL as that is the only field we need
        //to make an update to the Address object
        filtersAndValues.values = ["Id"];
        //Set the API Name of the Sort column based on the label
        SORT_COLUMN = result.sortColumn;
        NBR_OF_PARALLEL_THREADS=result.maxThreads;


        var regionFilter = extractRegionFromFilters(result.lens.label,filtersAndValues);
        var cTracts = extractCensusTractsFromFilters(filtersAndValues)
        if(regionFilter){
          //Remove all the filter criteria except Census Tract and Region
          filtersAndValues.filters = removeAllFiltersExceptCensusTracts(filtersAndValues);
          if(filtersAndValues.order){
            filtersAndValues.order=undefined;
          }
          //With the sort column added, validate maximum columns allowed
          BATCH_SIZE = result.batchSize;
          var value = {
              lens: filtersAndValues,
              dataset: result.lens.dataset.id,
              xmd: result.xmd,
              lensName: result.lens.label,
              saql: null,
              error: null
          };
          var saqlToExec = getSAQL(result.lens.dataset.id,result.xmd,value,filtersAndValues);
          saqlQueryOrig = saqlToExec;

          createTerritory(saqlToExec,filtersAndValues,result.lens.label,regionFilter,cTracts);            
        }

      }else{
        showErrorMessage('Error occurred:'+event.message,true);
      }


    }


    function getSAQL(datasetId, xmd, json,filtersAndValues) {

      var finalSAQL;
      // Some overrides to core to do the parsing
      // Spring 16 (and beyond?) support
      edge.app.Data.prototype._createExtMeta = function(xmd) {
        this.extMeta._buildExtMeta(xmd);
      }

      edge.app.Data.prototype.setEdgemart = function(e) { 
        this.edgemarts = [e] 
      };

      EdgemartOverride = function(e,t) {
        this.id=e;
        this.verId=t
      };

      EdgemartOverride.prototype.getReference = function() {
        return this.id + "/" + this.verId;
      };
      
      var d = new edge.app.Data();
      d._createExtMeta(xmd);
      var em = new EdgemartOverride(datasetId, xmd.versionId);

      edge.app.esObjectRepo.appUser = {};
      edge.app.esObjectRepo.appUser.getTimezone = function() { return "America/Los_Angeles"; }; // just set a default
      edge.app.esObjectRepo.appUser.getLocale = function() { return "en"; }; // expecting a locale when parsing dates

      try {
        var builder = d._getSAQLBuilder();
        var nextVar = builder.make(filtersAndValues, [em], d.extMeta);
        finalSAQL = nextVar.build();

        // Convert count(dim) --> unique(dim)...DDA...
        var countRe = /count[(][\']([\w|\d]+)/g;
        var reMatch;
        while((reMatch = countRe.exec(json.saql)) !== null) {
          if(_.indexOf(allDims, reMatch[1]) > -1) {
            finalSAQL = finalSAQL.replace("count('" + reMatch[1], "unique('" + reMatch[1]).replace("count_" + reMatch[1], "unique_" + reMatch[1]);
          }
        }
      } catch(err) {
        json.error = err.stack;
      } finally {
        return finalSAQL; 
      }
    }


    /*
      Validate the following:
     - There is a Region in the filter
     - There is 1 and only 1 region as the value
     - There is atleast 1 census tract in the filter
    */
    function extractRegionFromFilters(lensName,filtersAndValues) {
      var filters = filtersAndValues.filters;
      var idx=0,filterColName,regionVal,retVal,regionFilterExists=false,censusTractExists=false;
      for(idx=0;idx<filters.length;idx++){
        filterColName = (filters[idx])[0];
        if(filterColName == 'Region__c'){
          regionVal = (filters[idx])[1];
          regionFilterExists=true;
          if(regionVal.length == 1){
            retVal = regionVal[0];
          }else{
              showErrorMessage(undefined,lensName + " has more than 1 region values in the Region filter criteria. ",true);

          }
        }else if(filterColName == 'Census_Tract__c'){
          censusTractExists=true;
        }
        
      }
      if(!regionFilterExists){
        showErrorMessage(undefined,lensName+ " has no Region in the filter criteria. ",true);

      }
      if(!censusTractExists){
        showErrorMessage(undefined,
                lensName+ " has no Census Tract in the filter criteria. Require atleast 1 census tract in the filter criteria. ",true);
        retVal=undefined;

      }
      return retVal;
    }

    /*
      Get the list of census tracts from the filter criteria
    */
    function extractCensusTractsFromFilters(filtersAndValues) {
      var filters = filtersAndValues.filters;
      var idx=0,filterColName,cTractVal,retVal='';
      for(idx=0;idx<filters.length;idx++){
        filterColName = (filters[idx])[0];
        if(filterColName == 'Census_Tract__c'){
          cTractVal= (filters[idx])[1];
          retVal = cTractVal.join(',');
        }
        
      }
      return retVal.substring(0,retVal.length-1);
    }

    /*
      Remove all filter criteria except Census_Tract__c and Region__c
    */
    function removeAllFiltersExceptCensusTracts(filtersAndValues) {
      var filters = filtersAndValues.filters;
      var newFilter = new Array();
      var idx=0,filterColName,cTractVal,retVal='';
      for(idx=0;idx<filters.length;idx++){
        filterColName = (filters[idx])[0];
        if(filterColName == 'Census_Tract__c' || filterColName == 'Region__c'){
          newFilter.push(filters[idx]);
        }
        
      }
      return newFilter;
    }
    function createTerritory(saqlQuery,filtersAndValues,lensName,region,cTracts){
       // This remoting call will use the page's timeout value
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.TerritoryPlanningExtension.createTerritory}',
            { 
              "saqlQuery":saqlQuery,
              "columns":filtersAndValues.values,
              "lensName":lensName,
              "sortColumn":SORT_COLUMN,
              "batchSize":BATCH_SIZE,
              "region":region,
              "censusTracts":cTracts
            }, 
            function(result,event){
              if(event.status){
                result.saqlQuery = saqlQueryOrig;

                updateMessage("Total Records :"+result.recordCount);
                if(result.recordCount == 0){
                  showErrorMessage(result,result.lensName + " returned no matching records. ",true);
                }else{
                      parallelProcessAssignment(result);
                }
              }else{
                showErrorMessage(result,'Error occurred:'+event.message,true);
              }
            }
        );
    }


    function showErrorMessage(result,msg,show) {
      $j("#error_message").html(msg);
      if(show){
          if(result && result.fileIdList){
            result.tempFileIdList = result.fileIdList;
            cleanupTempfiles(result);
        }
        updateMessage('');
        showProcessingOverlay(false);

        $j("#error_msg_container").css("display","block");
      }else{
        $j("#error_msg_container").css("display","none");
      }
    }
    function updateMessage(msg){
      $j("#process_message").html(msg);
    }

    function parallelProcessAssignment(params){
      var BATCH_PER_THREAD = params.batchSize;
      if(params.recordCount<BATCH_PER_THREAD){
        NBR_OF_PARALLEL_THREADS=1;
      }
      var maxRecordsPerProcess = params.recordCount/NBR_OF_PARALLEL_THREADS;
      var round2NearestBatch = Math.round(maxRecordsPerProcess/BATCH_PER_THREAD)*BATCH_PER_THREAD;

      var totalRecsSplit = 0;
      var idx;
      for(idx=0;idx<NBR_OF_PARALLEL_THREADS-1;idx++){
        var newParam = JSON.parse(JSON.stringify(params));
        newParam.processName='Thread-'+(idx+1);
        newParam.territoryId=params.territoryId;
        newParam.currRecordCount = (idx)*round2NearestBatch;
        newParam.currentChunk = newParam.currRecordCount/BATCH_PER_THREAD;
        newParam.recordCount = newParam.currRecordCount+round2NearestBatch;
        totalRecsSplit +=newParam.recordCount;
        processParams[newParam.processName] = newParam;
      }
      var newParam = JSON.parse(JSON.stringify(params));
      newParam.processName='Thread-'+(idx+1);
      newParam.currRecordCount = idx*round2NearestBatch;
      newParam.recordCount = params.recordCount;
      newParam.currentChunk = newParam.currRecordCount/BATCH_PER_THREAD;
      processParams[newParam.processName] = newParam;
      
      pollingFuncId = setInterval(isProcessingComplete,10000);
      for(var i=1;i<=NBR_OF_PARALLEL_THREADS;i++){
        processAssignment(processParams['Thread-'+i]);
      }
    } 

    function isProcessingComplete(){
      var completedProcesses=0; 
      var recordsProcesssed = 0,totalRecordCount=0;
      var prevRecordCount=0;
      for(var i=1;i<=NBR_OF_PARALLEL_THREADS;i++){
        var procParam = processParams['Thread-'+i];
        //logMessage(procParam.processName+ ',currRecordCount = '+procParam.currRecordCount+
        //       ',recordCount='+procParam.recordCount+',prevRecordCount='+prevRecordCount);
        if(procParam.currRecordCount >= procParam.recordCount ){
          logMessage(procParam.processName +' completed.');
          completedProcesses++;
        }else{
          recordsProcesssed+=procParam.currRecordCount-prevRecordCount;
          totalRecordCount=procParam.recordCount;
          prevRecordCount=procParam.recordCount;
        }
      }
      logMessage(completedProcesses + ' of '+NBR_OF_PARALLEL_THREADS + ' processes  complete');
      if(completedProcesses == NBR_OF_PARALLEL_THREADS){
        clearInterval(pollingFuncId);
        updateMessage(''); 
          showProcessingOverlay(false);
          var params = processParams['Thread-1'];
          window.location='/'+params.territoryId;

      }else{
        updateMessage('Processed '+recordsProcesssed +' of '+totalRecordCount+' records');
      }
    }
    function processAssignment(params){
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.TerritoryPlanningExtension.assignAddressToTerritory}',
            params,
            processAssignmentResponse,
            { buffer: false, timeout: 60000 }
        );
    }     

    function processAssignmentResponse(result,event){
      logMessage(result.processName+' - Processed '+result.currRecordCount +' of '+result.recordCount+', Errors='+result.errorCount+
                ',d='+result.processMetrics.dbTime.metricValue/1000+
                '('+Math.round((result.processMetrics.dbTime.metricValue/result.processMetrics.endToEnd.metricValue)*100)+
                "% ),a="+result.processMetrics.apiTime.metricValue/1000+
                '('+Math.round((result.processMetrics.apiTime.metricValue/result.processMetrics.endToEnd.metricValue)*100)+
                "% ),p="+result.processMetrics.processTime.metricValue/1000+
                '('+Math.round((result.processMetrics.processTime.metricValue/result.processMetrics.endToEnd.metricValue)*100)+"% )");           
      result.saqlQuery = saqlQueryOrig;
      if(event.status){
        //Set the master process params's currRecordCount and fileIdList to the latest recordCount for this process     
        processParams[result.processName].currRecordCount =  result.currRecordCount;    
        processParams[result.processName].columns =  result.columns;    
        processParams[result.processName].lensName =  result.lensName;
        if(result.currRecordCount < result.recordCount){
          processAssignment(result);
          }
        }else{
        showErrorMessage('Error occurred:'+event.message,true);
        }
    }

    function logMessage(msg){
      if(debugEnabled){
        logger.debug(msg);
      }
    }


  </script>
  </body>

</apex:page>
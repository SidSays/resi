<apex:page showHeader="true" sidebar="false" controller="TerritoryValidationController">

  <head>
     <apex:includeScript value="https://code.jquery.com/jquery-2.1.4.min.js"/>
    <script src="{!URLFOR($Resource.queryParser2, 'edge.Core.js')}"></script>
    <script src="{!URLFOR($Resource.queryParser2, 'utils.js')}"></script>
    <script src="{!URLFOR($Resource.log4js, 'log4javascript.js')}"></script>
    <style media="screen" type="text/css">

    .pagespinner{
      display:none;
    }
    #loading {  
                position:absolute;
                top:0;
                left:0;
                width:100%;
                height:100%;
                z-index:1000;
                background-color:grey;
                opacity: .8;
                vertical-align: middle;
        } 
        .ajax-loader {
            position: absolute;
            left: 50%;
            top: 50%;
            margin-left: -32px; /* -1 * image width / 2 */
            margin-top: -32px;  /* -1 * image height / 2 */
            display: block;     
        }
        #process_message {
            z-index:2000;
            margin-top: 10px;
            color: white;    
        }

        #info_msgs{
          margin:5px;
        }
    </style>    
  </head>
  <body>
    <div id="loading" align="center" style="display:none;">
      <div class="ajax-loader">
            <img src="{!$Resource.AjaxLoader}"/><br/>
            <div id="process_message">
            </div>
          </div>
      </div>
    <div id="error_msg_container" style="display:none;">
      <apex:pageMessage severity="error" strength="1">
        <div id="error_message">
        </div>
      </apex:pageMessage>
    </div>
    <apex:pageBlock title="Region selection">
      <apex:pageBlockSection collapsible="false" columns="2">
        <apex:pageBlockSectionItem >
            <div>Select the Region to validate territories</div>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <select id="selectedRegion">
            <option value="" selected="true">None</option>
          </select>
          <button style="display:none;" id="assignBtn" onClick="validateTerritories()">Validate</button>
        </apex:pageBlockSectionItem>
      </apex:pageBlockSection>
    </apex:pageBlock> 
    <apex:pageBlock title="Validation errors">
      <apex:pageBlockSection collapsible="false" columns="2">
        <div id="validationErrors">
        </div>
      </apex:pageBlockSection>
    </apex:pageBlock>

  <script type="text/javascript">

    var debugEnabled= ('true' == '{!$CurrentPage.parameters.debug}');
    var logger = log4javascript.getLogger("main");
    var appender = new log4javascript.InPageAppender();
    logger.addAppender(appender);

    var saqlQueryOrig;
    var NBR_OF_PARALLEL_THREADS=5;
    $j = jQuery.noConflict();
    var processParams = {};
    var pollingFuncId;

    $j(document).ready(function(){
	      // please note, 
	      // that IE11 now returns undefined again for window.chrome
	      // and new Opera 30 outputs true for window.chrome
	      // and new IE Edge outputs to true now for window.chrome
	      // and if not iOS Chrome check
	      // so use the below updated condition
	      var isChromium = window.chrome,
	          winNav = window.navigator,
	          vendorName = winNav.vendor,
	          isOpera = winNav.userAgent.indexOf("OPR") > -1,
	          isIEedge = winNav.userAgent.indexOf("Edge") > -1,
	          isIOSChrome = winNav.userAgent.match("CriOS");

	      if( ! ( isChromium !== null && isChromium !== undefined && 
	          vendorName === "Google Inc." && isOpera == false && isIEedge == false)) {
	         // is not Google Chrome
	        showProcessingOverlay(true);
	        updateMessage("{!$Label.USE_CHROME_ERROR_MESSAGE}");    
	          
	      } 

	      $j('#selectedRegion').change(function(){
	        if(this.value !=""){
	          $j("#assignBtn").css("display","inline");
	        }else{
	          $j("#assignBtn").css("display","none");
	        }
	      });
	      Visualforce.remoting.Manager.invokeAction(
	                '{!$RemoteAction.TerritoryValidationController.getRegions}',
	                populateRegions
	      );
    });

    function showProcessingOverlay(show){
      if(show){
        $j("#loading").css("display","inline");
      }else{
        $j("#loading").css("display","none");
      }
    }
    function validateTerritories(){
      getFolderIdForRegion($j("#selectedLens option:selected").val());
    }
    function populateRegions(result,event){
      for(var i=0;i<result.length;i++){
          $j('#selectedRegion').append($j('<option>', { 
              value: result[i],
              text : result[i] 
          }));

      }
    }



    function getFolderIdForRegion(regionName){
       	showProcessingOverlay(true);
 		Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.TerritoryValidationController.getFolderIdForRegion}',
            $j("#selectedRegion option:selected").val(), 
            function(result,event){
              if(event.status){
              	if(result){
              		getLensInFolder(result);
              	}else{
              		showErrorMessage(undefined,'Unable to find folder for selected region',true);
              	}
              }else{
                showErrorMessage(result,'Error occurred:'+event.message,true);
              }
            }
        );

    }
    Object.size = function(obj) {
	    var size = 0, key;
	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) size++;
	    }
	    return size;
	};

    function decodeHTMLEntities(text) {
        var entities = [
            ['apos', '\''],
            ['quot', '"'],
            ['amp', '&'],
            ['lt', '<'],
            ['gt', '>'],
            ['#x2F','/']
        ];

        for (var i = 0, max = entities.length; i < max; ++i) 
            text = text.replace(new RegExp('&'+entities[i][0]+';', 'g'), entities[i][1]);

        return text;
    }

    function showErrorMessage(result,msg,show) {
      $j("#error_message").html(msg);
      if(show){
          if(result && result.fileIdList){
            result.tempFileIdList = result.fileIdList;
            cleanupTempfiles(result);
        }
        updateMessage('');
        showProcessingOverlay(false);

        $j("#error_msg_container").css("display","block");
      }else{
        $j("#error_msg_container").css("display","none");
      }
    }
    function updateMessage(msg){
      $j("#process_message").html(msg);
    }

    function getLensInFolder(folderId) {
 		Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.TerritoryValidationController.getAvailableLenses}',
            folderId,
            getLensInFolderResponse 
            
        );     
	 }

  	function getLensInFolderResponse(result,event) {
   		 parallelProcess(result)   
  	}

	
    function parallelProcess(lensList){
      var lensPerThread = Math.round(lensList.length/NBR_OF_PARALLEL_THREADS)+1;
      var threadIdx=0;
      var currParam = {lensIdList:new Array()},lensesAdded=0;
      for(idx=0;idx<=NBR_OF_PARALLEL_THREADS-1;idx++){
      	processParams['Thread-'+idx]= {	"recordCount":0,
      									"processName":'Thread-'+idx,
      									"lensIdList":new Array(),
      									"currentRecordCount":0,
      									"censusTracts":{}
      								};
      }

      for(idx=0;idx<lensList.length;idx++){
      	for(idy=0;idy<=NBR_OF_PARALLEL_THREADS-1;idy++){
      		if(lensList.length != 0){
      			processParams['Thread-'+idy].lensIdList.push(lensList.pop());
      			processParams['Thread-'+idy].recordCount++;
      		}else{
      			break;
      		}
      	}
      }
      var newProcessParam = {};
      for(idx=0;idx<NBR_OF_PARALLEL_THREADS-1;idx++){
      	if(processParams['Thread-'+idx].recordCount>0){
      		newProcessParam['Thread-'+idx]=processParams['Thread-'+idx];
      	}
      }
      processParams = newProcessParam;

      
      pollingFuncId = setInterval(isProcessingComplete,10000);
      for(var i=0;i<Object.size(processParams);i++){
        getLensData(processParams['Thread-'+i]);
      }
    } 

    function isProcessingComplete(){
      var completedProcesses=0; 
      var recordsProcesssed = 0,totalRecordCount=0;
      var prevRecordCount=0;
      for(var i=0;i<Object.size(processParams);i++){
        var procParam = processParams['Thread-'+i];
        //logMessage(procParam.processName+ ',currRecordCount = '+procParam.currRecordCount+
        //       ',recordCount='+procParam.recordCount+',prevRecordCount='+prevRecordCount);
        if(procParam.currentRecordCount >= procParam.recordCount ){
          logMessage(procParam.processName +' completed.');
          completedProcesses++;
        }
      }
      logMessage(completedProcesses + ' of '+Object.size(processParams) + ' processes  complete');
      if(completedProcesses == Object.size(processParams)){
        clearInterval(pollingFuncId);
        updateMessage('Determinnig overlaps in territory criteria'); 
        determineOverlaps();

      }else{
        updateMessage('Processed '+recordsProcesssed +' of '+totalRecordCount+' records');
      }
    }

    function determineOverlaps(){
      var lensToTerritory = {};


      for(var i=0;i<Object.size(processParams);i++){
        var procParam = processParams['Thread-'+i];
        //Look into the map and 
        for (lensName in procParam.censusTracts) {
          var cTracts = procParam.censusTracts[lensName];
          for(var j=0;j<cTracts.length;j++){
            var theTract = lensToTerritory[cTracts[j]];
            if(!theTract){
              theTract = {
                "censusTract":cTracts[j],
                "lenses": new Array(),
                "lensCount":1
              };
              theTract.lenses.push(lensName);
              lensToTerritory[cTracts[j]]=theTract;
            }
            else{
              theTract.lenses.push(lensName);
              theTract.lensCount++;
            }
          }
        }
      }

      var valErrorTable = '<ul>';
      var includedLenses='';;
      for(cTract in lensToTerritory){
        if(lensToTerritory[cTract].lensCount>1){
          valErrorTable+= '<li>Census tract <b>'+cTract+'</b> is included in multiple lenses : <b>'+lensToTerritory[cTract].lenses.join(',')+'</b></li>';
        }
      } 
      valErrorTable+='</ul>';  
      showProcessingOverlay(false);  
      $j("#validationErrors").html(valErrorTable);
    }
    function getLensData(params){
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.TerritoryValidationController.getLensData}',
            params,
            processLensDataResponse,
            { buffer: false, timeout: 60000 }
        );
    }     

    function processLensDataResponse(result,event){
     	if(event.status){
	        //Set the master process params's currRecordCount and fileIdList to the latest recordCount for this process     
	        processParams[result.processName].currentRecordCount++;    
	        var queryStr = decodeHTMLEntities(result.lensData.state.query.query);
	        var cTracts = extractCensusTractsFromFilters(JSON.parse(queryStr));
	        processParams[result.processName].censusTracts[result.lensData.label]=cTracts;
	        if(processParams[result.processName].currentRecordCount < processParams[result.processName].recordCount){
	          getLensData(processParams[result.processName]);
	        }
	    }else{
	        showErrorMessage('Error occurred:'+event.message,true);
	    }
    }

   function extractCensusTractsFromFilters(filtersAndValues) {
      var filters = filtersAndValues.filters;
      var idx=0,filterColName,cTractVal,retVal='';
      for(idx=0;idx<filters.length;idx++){
        filterColName = (filters[idx])[0];
        if(filterColName == 'Census_Tract__c'){
          return (filters[idx])[1];
          
        }
        
      }
      return retVal.substring(0,retVal.length-1);
    }
	
	
    function logMessage(msg){
      if(debugEnabled){
        logger.debug(msg);
      }
    }




  </script>
  </body>

</apex:page>